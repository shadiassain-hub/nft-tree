{"version":3,"file":"index.js","mappings":"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","sources":["webpack://StacksTransactions/webpack/universalModuleDefinition","webpack://StacksTransactions/webpack/runtime/create fake namespace object","webpack://StacksTransactions/../../node_modules/@noble/hashes/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/utils.js","webpack://StacksTransactions/../../node_modules/base-x/src/index.js","webpack://StacksTransactions/../../node_modules/c32check/lib/address.js","webpack://StacksTransactions/../../node_modules/c32check/lib/base58check.js","webpack://StacksTransactions/../../node_modules/c32check/lib/checksum.js","webpack://StacksTransactions/../../node_modules/c32check/lib/encoding.js","webpack://StacksTransactions/../../node_modules/c32check/lib/index.js","webpack://StacksTransactions/./src/BytesReader.ts","webpack://StacksTransactions/./src/address.ts","webpack://StacksTransactions/./src/authorization.ts","webpack://StacksTransactions/./src/builders.ts","webpack://StacksTransactions/./src/clarity/prettyPrint.ts","webpack://StacksTransactions/./src/cl.ts","webpack://StacksTransactions/./src/clarity/clarityValue.ts","webpack://StacksTransactions/./src/clarity/constants.ts","webpack://StacksTransactions/./src/clarity/deserialize.ts","webpack://StacksTransactions/./src/clarity/parser.ts","webpack://StacksTransactions/./src/clarity/serialize.ts","webpack://StacksTransactions/./src/clarity/values/booleanCV.ts","webpack://StacksTransactions/./src/clarity/values/bufferCV.ts","webpack://StacksTransactions/./src/clarity/values/intCV.ts","webpack://StacksTransactions/./src/clarity/values/listCV.ts","webpack://StacksTransactions/./src/clarity/values/optionalCV.ts","webpack://StacksTransactions/./src/clarity/values/principalCV.ts","webpack://StacksTransactions/./src/clarity/values/responseCV.ts","webpack://StacksTransactions/./src/clarity/values/stringCV.ts","webpack://StacksTransactions/./src/clarity/values/tupleCV.ts","webpack://StacksTransactions/./src/constants.ts","webpack://StacksTransactions/./src/contract-abi.ts","webpack://StacksTransactions/./src/errors.ts","webpack://StacksTransactions/./src/fetch.ts","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/hmac.js","webpack://StacksTransactions/../common/dist/esm/signatures.js","webpack://StacksTransactions/../common/dist/esm/keys.js","webpack://StacksTransactions/./src/keys.ts","webpack://StacksTransactions/./src/namespaces/address.ts","webpack://StacksTransactions/./src/pc.ts","webpack://StacksTransactions/./src/postcondition.ts","webpack://StacksTransactions/./src/signer.ts","webpack://StacksTransactions/./src/structuredDataSignature.ts","webpack://StacksTransactions/./src/transaction.ts","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/ripemd160.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_u64.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha512.js","webpack://StacksTransactions/./src/utils.ts","webpack://StacksTransactions/./src/wire/create.ts","webpack://StacksTransactions/./src/wire/helpers.ts","webpack://StacksTransactions/./src/wire/serialization.ts","webpack://StacksTransactions/./src/wire/types.ts","webpack://StacksTransactions/../../node_modules/lodash.clonedeep/index.js","webpack://StacksTransactions/../common/dist/esm/buffer.js","webpack://StacksTransactions/../common/dist/esm/constants.js","webpack://StacksTransactions/../common/dist/esm/utils.js","webpack://StacksTransactions/../network/dist/esm/constants.js","webpack://StacksTransactions/../common/dist/esm/fetch.js","webpack://StacksTransactions/../network/dist/esm/network.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/utils.js","webpack://StacksTransactions/../../node_modules/@noble/secp256k1/lib/esm/index.js","webpack://StacksTransactions/webpack/bootstrap","webpack://StacksTransactions/webpack/runtime/compat get default export","webpack://StacksTransactions/webpack/runtime/define property getters","webpack://StacksTransactions/webpack/runtime/global","webpack://StacksTransactions/webpack/runtime/hasOwnProperty shorthand","webpack://StacksTransactions/webpack/runtime/make namespace object","webpack://StacksTransactions/webpack/runtime/node module decorator"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StacksTransactions\"] = factory();\n\telse\n\t\troot[\"StacksTransactions\"] = factory();\n})(this, () => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","import { bytesToHex, hexToBytes, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * @ignore\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\n/** @ignore */\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(bytes: string | Uint8Array) {\n    this.source = typeof bytes === 'string' ? hexToBytes(bytes) : bytes;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n","import {\n  STACKS_MAINNET,\n  StacksNetwork,\n  StacksNetworkName,\n  TransactionVersion,\n  networkFrom,\n} from '@stacks/network';\nimport { AddressHashMode, AddressVersion } from './constants';\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  network?: StacksNetworkName | StacksNetwork\n): AddressVersion {\n  network = networkFrom(network ?? STACKS_MAINNET);\n  switch (hashMode) {\n    case AddressHashMode.P2PKH:\n      switch (network.transactionVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected transactionVersion ${network.transactionVersion} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.P2SH:\n    case AddressHashMode.P2SHNonSequential:\n    case AddressHashMode.P2WPKH:\n    case AddressHashMode.P2WSH:\n    case AddressHashMode.P2WSHNonSequential:\n      switch (network.transactionVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected transactionVersion ${network.transactionVersion} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${hashMode}`);\n  }\n}\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  PrivateKey,\n  PublicKey,\n  writeUInt16BE,\n} from '@stacks/common';\nimport { BytesReader } from './BytesReader';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n} from './constants';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport {\n  createStacksPublicKey,\n  privateKeyToPublic,\n  publicKeyFromSignatureVrs,\n  publicKeyIsCompressed,\n  signWithKey,\n} from './keys';\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  deserializeMessageSignature,\n  MessageSignatureWire,\n  PublicKeyWire,\n  serializeLPListBytes,\n  serializeMessageSignatureBytes,\n  StacksWireType,\n  TransactionAuthFieldWire,\n} from './wire';\n\nexport function emptyMessageSignature(): MessageSignatureWire {\n  return {\n    type: StacksWireType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignatureWire;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthFieldWire[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSpendingCondition(\n  options:\n    | {\n        // Single-sig\n        publicKey: string;\n        nonce: IntegerType;\n        fee: IntegerType;\n      }\n    | {\n        // Multi-sig\n        publicKeys: string[];\n        numSignatures: number;\n        nonce: IntegerType;\n        fee: IntegerType;\n      }\n) {\n  if ('publicKey' in options) {\n    return createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  }\n  // multi-sig\n  return createMultiSigSpendingCondition(\n    AddressHashMode.P2SH,\n    options.numSignatures,\n    options.publicKeys,\n    options.nonce,\n    options.fee\n  );\n}\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: PublicKey,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    1,\n    [createStacksPublicKey(pubKey)]\n  ).hash160;\n  const keyEncoding = publicKeyIsCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce),\n    fee: intToBigInt(fee),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    stacksPublicKeys\n  ).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce),\n    fee: intToBigInt(fee),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\n/** Advanced: Checks if the condition is a single signature spending condition. */\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\n// todo: add override for the functions below to allow for address string input as well.\n\n/** Advanced: Checks if the address is for a sequential (legacy) multi-signature spending condition. */\nexport function isSequentialMultiSig(hashMode: AddressHashMode): boolean {\n  return hashMode === AddressHashMode.P2SH || hashMode === AddressHashMode.P2WSH;\n}\n\n/** Advanced: Checks if the address is for a non-sequential multi-signature spending condition. */\nexport function isNonSequentialMultiSig(hashMode: AddressHashMode): boolean {\n  return (\n    hashMode === AddressHashMode.P2SHNonSequential ||\n    hashMode === AddressHashMode.P2WSHNonSequential\n  );\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): string {\n  return bytesToHex(serializeSingleSigSpendingConditionBytes(condition));\n}\n\nexport function serializeSingleSigSpendingConditionBytes(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, 8),\n    intToBytes(condition.fee, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignatureBytes(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): string {\n  return bytesToHex(serializeMultiSigSpendingConditionBytes(condition));\n}\n\nexport function serializeMultiSigSpendingConditionBytes(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, 8),\n    intToBytes(condition.fee, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPListBytes(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.P2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksWireType.TransactionAuthField)\n    .values as TransactionAuthFieldWire[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksWireType.PublicKey:\n        if (!publicKeyIsCompressed(field.contents.data)) haveUncompressed = true;\n        break;\n      case StacksWireType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (\n    haveUncompressed &&\n    (hashMode === AddressHashMode.P2WSH || hashMode === AddressHashMode.P2WSHNonSequential)\n  ) {\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n  }\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): string {\n  return bytesToHex(serializeSpendingConditionBytes(condition));\n}\n\nexport function serializeSpendingConditionBytes(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) return serializeSingleSigSpendingConditionBytes(condition);\n  return serializeMultiSigSpendingConditionBytes(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\n/** @ignore */\nexport function sigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, 8)) +\n    bytesToHex(intToBytes(nonce, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\n/** @internal */\nfunction sigHashPostSign(curSigHash: string, pubKey: PublicKeyWire, signature: string): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = publicKeyIsCompressed(pubKey.data)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: PrivateKey\n): {\n  nextSig: string;\n  nextSigHash: string;\n} {\n  const sigHashPre = sigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPre);\n  const publicKey = createStacksPublicKey(privateKeyToPublic(privateKey));\n  const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: string\n) {\n  const sigHashPre = sigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPre, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, '', 0, 0);\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature.data\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    1,\n    [pubKey]\n  ).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: PublicKeyWire[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    switch (field.contents.type) {\n      case StacksWireType.PublicKey:\n        if (!publicKeyIsCompressed(field.contents.data)) haveUncompressed = true;\n        publicKeys.push(field.contents);\n        break;\n      case StacksWireType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents.data\n        );\n\n        if (isSequentialMultiSig(condition.hashMode)) {\n          curSigHash = nextSigHash;\n        }\n\n        publicKeys.push(pubKey);\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n        break;\n    }\n  }\n\n  if (\n    (isSequentialMultiSig(condition.hashMode) && numSigs !== condition.signaturesRequired) ||\n    (isNonSequentialMultiSig(condition.hashMode) && numSigs < condition.signaturesRequired)\n  )\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (\n    haveUncompressed &&\n    (condition.hashMode === AddressHashMode.P2WSH ||\n      condition.hashMode === AddressHashMode.P2WSHNonSequential)\n  )\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.P2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard); // todo: should this be .Sponsored?\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce),\n    fee: intToBigInt(sponsorSpendingCondition.fee),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): string {\n  return bytesToHex(serializeAuthorizationBytes(auth));\n}\n\nexport function serializeAuthorizationBytes(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n      bytesArray.push(serializeSpendingConditionBytes(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n","import { IntegerType, PrivateKey, PublicKey } from '@stacks/common';\nimport {\n  NetworkClientParam,\n  STACKS_MAINNET,\n  clientFromNetwork,\n  networkFrom,\n} from '@stacks/network';\nimport { c32address } from 'c32check';\nimport {\n  SpendingCondition,\n  createMultiSigSpendingCondition,\n  createSingleSigSpendingCondition,\n  createSponsoredAuth,\n  createStandardAuth,\n  isSingleSig,\n} from './authorization';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport {\n  AddressHashMode,\n  ClarityVersion,\n  MultiSigHashMode,\n  PayloadType,\n  PostConditionMode,\n  SingleSigHashMode,\n} from './constants';\nimport { ClarityAbi, validateContractCall } from './contract-abi';\nimport { fetchAbi, fetchFeeEstimate, fetchNonce } from './fetch';\nimport {\n  createStacksPublicKey,\n  privateKeyToHex,\n  privateKeyToPublic,\n  publicKeyToAddress,\n  publicKeyToHex,\n} from './keys';\nimport { postConditionModeFrom, postConditionToWire } from './postcondition';\nimport { PostCondition, PostConditionModeName } from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransactionWire, deriveNetworkFromTx } from './transaction';\nimport { omit } from './utils';\nimport {\n  PostConditionWire,\n  addressFromPublicKeys,\n  createAddress,\n  createContractCallPayload,\n  createLPList,\n  createSmartContractPayload,\n  createTokenTransferPayload,\n  deserializePostConditionWire,\n} from './wire';\n\n/** @deprecated Not used internally */\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\nexport interface UnsignedMultiSigOptions {\n  /** The minimum required signatures N (in a N of M multi-sig) */\n  numSignatures: number;\n  /** The M public-keys (in a N of M multi-sig), which together form the address of the multi-sig account */\n  publicKeys: PublicKey[];\n  /**\n   * The `address` of the multi-sig account.\n   * - If NOT provided, the public-key order is taken AS IS.\n   * - If provided, the address will be checked against the order of the public-keys (either AS IS or SORTED).\n   * The default is to SORT the public-keys (only if the `address` is provided).\n   */\n  address?: string;\n  /** @experimental Use newer non-sequential multi-sig hashmode for transaction. Future releases may make this the default. */\n  useNonSequentialMultiSig?: boolean;\n}\n\nexport type SignedMultiSigOptions = UnsignedMultiSigOptions & {\n  signerKeys: PrivateKey[];\n};\n\n/**\n * STX token transfer transaction options\n *\n * Note: Standard STX transfer does not allow post-conditions.\n */\nexport type TokenTransferOptions = {\n  /** the address of the recipient of the token transfer */\n  recipient: string | PrincipalCV;\n  /** the amount to be transfered in microstacks */\n  amount: IntegerType;\n  /** the transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** an arbitrary string to include in the transaction, must be less than 34 bytes */\n  memo?: string;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: PublicKey;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: PrivateKey;\n}\n\nexport type UnsignedMultiSigTokenTransferOptions = TokenTransferOptions & UnsignedMultiSigOptions;\n\nexport type SignedMultiSigTokenTransferOptions = TokenTransferOptions & SignedMultiSigOptions;\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promise<StacksTransactionWire>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    // no post conditions on STX transfers (see SIP-005)\n  });\n\n  if (txOptions.fee == null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce == null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n */\nexport type BaseContractDeployOptions = {\n  clarityVersion?: ClarityVersion;\n  contractName: string;\n  /** the Clarity code to be deployed */\n  codeBody: string;\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionModeName | PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: (PostCondition | PostConditionWire | string)[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the public key of the transaction sender */\n  publicKey: PublicKey;\n}\n\nexport interface SignedContractDeployOptions extends BaseContractDeployOptions {\n  senderKey: PrivateKey;\n}\n\n/** @deprecated Use {@link SignedContractDeployOptions} or {@link UnsignedContractDeployOptions} instead. */\nexport interface ContractDeployOptions extends SignedContractDeployOptions {}\n\nexport type UnsignedMultiSigContractDeployOptions = BaseContractDeployOptions &\n  UnsignedMultiSigOptions;\n\nexport type SignedMultiSigContractDeployOptions = BaseContractDeployOptions & SignedMultiSigOptions;\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param {SignedContractDeployOptions | SignedMultiSigContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeContractDeploy(\n  txOptions: SignedContractDeployOptions | SignedMultiSigContractDeployOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractDeploy(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\nexport async function makeUnsignedContractDeploy(\n  txOptions: UnsignedContractDeployOptions | UnsignedMultiSigContractDeployOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n    clarityVersion: ClarityVersion.Clarity3,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n  options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n\n  const payload = createSmartContractPayload(\n    options.contractName,\n    options.codeBody,\n    options.clarityVersion\n  );\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const postConditions: PostConditionWire[] = (options.postConditions ?? []).map(pc => {\n    if (typeof pc === 'string') return deserializePostConditionWire(pc);\n    if (typeof pc.type === 'string') return postConditionToWire(pc);\n    return pc;\n  });\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    postConditions: lpPostConditions,\n    postConditionMode: options.postConditionMode,\n  });\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n */\nexport type ContractCallOptions = {\n  /** the Stacks address of the contract */\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionModeName | PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: (PostCondition | PostConditionWire | string)[];\n  /** set to true to validate that the supplied function args match those specified in\n   * the published contract */\n  validateWithAbi?: boolean | ClarityAbi;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: PrivateKey;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: PublicKey;\n}\n\nexport type UnsignedMultiSigContractCallOptions = ContractCallOptions & UnsignedMultiSigOptions;\n\nexport type SignedMultiSigContractCallOptions = ContractCallOptions & SignedMultiSigOptions;\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransactionWire>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n  options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await fetchAbi({ ...options });\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const postConditions: PostConditionWire[] = (options.postConditions ?? []).map(pc => {\n    if (typeof pc === 'string') return deserializePostConditionWire(pc);\n    if (typeof pc.type === 'string') return postConditionToWire(pc);\n    return pc;\n  });\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    postConditions: lpPostConditions,\n    postConditionMode: options.postConditionMode,\n  });\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\n/**\n * Sponsored transaction options\n */\nexport type SponsorOptionsOpts = {\n  /** the origin-signed transaction */\n  transaction: StacksTransactionWire;\n  /** the sponsor's private key */\n  sponsorPrivateKey: PrivateKey;\n  /** the transaction fee amount to sponsor */\n  fee?: IntegerType;\n  /** the nonce of the sponsor account */\n  sponsorNonce?: IntegerType;\n  /** the hashmode of the sponsor's address */\n  sponsorAddressHashmode?: AddressHashMode;\n} & NetworkClientParam;\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param {SponsorOptionsOpts} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptionsOpts\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: 0 as IntegerType,\n    sponsorNonce: 0 as IntegerType,\n    sponsorAddressHashmode: AddressHashMode.P2PKH as SingleSigHashMode,\n    network: deriveNetworkFromTx(sponsorOptions.transaction),\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n\n  const sponsorPubKey = privateKeyToPublic(options.sponsorPrivateKey);\n\n  if (sponsorOptions.fee == null) {\n    let txFee: bigint | number = 0;\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n      case PayloadType.SmartContract:\n      case PayloadType.VersionedSmartContract:\n      case PayloadType.ContractCall:\n        txFee = BigInt(await fetchFeeEstimate({ ...options }));\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (sponsorOptions.sponsorNonce == null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await fetchNonce({ address, ...options });\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    sponsorPubKey,\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = options.sponsorPrivateKey;\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return signer.transaction;\n}\n\n/** @internal multi-sig signing re-use */\nfunction mutatingSignAppendMultiSig(\n  /** **Warning:** method mutates `transaction` */\n  transaction: StacksTransactionWire,\n  publicKeys: string[],\n  signerKeys: string[],\n  address?: string\n) {\n  if (isSingleSig(transaction.auth.spendingCondition)) {\n    throw new Error('Transaction is not a multi-sig transaction');\n  }\n\n  const signer = new TransactionSigner(transaction);\n\n  const pubs = address\n    ? sortPublicKeysForAddress(\n        publicKeys,\n        transaction.auth.spendingCondition.signaturesRequired,\n        transaction.auth.spendingCondition.hashMode,\n        createAddress(address).hash160\n      )\n    : publicKeys;\n\n  // sign in order of public keys\n  for (const publicKey of pubs) {\n    const signerKey = signerKeys.find(key => privateKeyToPublic(key) === publicKey);\n    if (signerKey) {\n      // either sign and append message signature (which allows for recovering the public key)\n      signer.signOrigin(signerKey);\n    } else {\n      // or append the public key (which did not sign here)\n      signer.appendOrigin(publicKey);\n    }\n  }\n}\n\n/** @internal Get the matching public-keys array for a multi-sig address */\nfunction sortPublicKeysForAddress(\n  publicKeys: string[],\n  numSigs: number,\n  hashMode: MultiSigHashMode,\n  hash: string\n): string[] {\n  // unsorted\n  const hashUnsorted = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    publicKeys.map(createStacksPublicKey)\n  ).hash160;\n\n  if (hashUnsorted === hash) return publicKeys;\n\n  // sorted\n  const publicKeysSorted = publicKeys.slice().sort();\n  const hashSorted = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    publicKeysSorted.map(createStacksPublicKey)\n  ).hash160;\n\n  if (hashSorted === hash) return publicKeysSorted;\n\n  throw new Error('Failed to find matching multi-sig address given public-keys.');\n}\n","/*\n  Format Clarity Values into Clarity style readable strings\n  eg:\n  `Cl.uint(1)` => u1\n  `Cl.list(Cl.uint(1))` => (list u1)\n  `Cl.tuple({ id: u1 })` => { id: u1 }\n*/\n\nimport { ClarityType, ClarityValue, ListCV, TupleCV } from '.';\n\nfunction escape(value: string): string {\n  // Use JSON.stringify to handle all necessary escape sequences (e.g., \\n, \\r, \\t, \\\", \\\\, \\uXXXX).\n  // JSON.stringify(value) produces a string like \"\\\"hello\\nworld\\\"\", so we slice off the leading and trailing quotes.\n  return JSON.stringify(value).slice(1, -1);\n}\n\nfunction formatSpace(space: number, depth: number, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\n\n/**\n * @description format List clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatList(Cl.list([Cl.uint(1)]))\n * // (list u1)\n *\n * formatList(Cl.list([Cl.uint(1)]), 2)\n * // (list\n * //   u1\n * // )\n * ```\n */\nfunction formatList(cv: ListCV, space: number, depth = 1): string {\n  if (cv.value.length === 0) return '(list)';\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n\n  const items = cv.value.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\n\n/**\n * @description format Tuple clarity values in clarity style strings\n * the keys are alphabetically sorted\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }))\n * // { age: 20, id: u1 }\n *\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }, 2))\n * // {\n * //   age: 20,\n * //   id: u1\n * // }\n * ```\n */\nfunction formatTuple(cv: TupleCV, space: number, depth = 1): string {\n  if (Object.keys(cv.value).length === 0) return '{}';\n\n  const items: string[] = [];\n  for (const [key, value] of Object.entries(cv.value)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n\n  return `{${spaceBefore}${items.sort().join(`,${spaceBefore}`)}${endSpace}}`;\n}\n\nfunction exhaustiveCheck(param: never): never {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\n\n// the exported function should not expose the `depth` argument\nfunction prettyPrintWithDepth(cv: ClarityValue, space = 0, depth: number): string {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n\n  if (cv.type === ClarityType.StringASCII) return `\"${escape(cv.value)}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${escape(cv.value)}\"`;\n\n  if (cv.type === ClarityType.PrincipalContract) return `'${cv.value}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${cv.value}`;\n\n  if (cv.type === ClarityType.Buffer) return `0x${cv.value}`;\n\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome)\n    return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.ResponseOk)\n    return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr)\n    return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n\n  // make sure that we exhausted all ClarityTypes\n  exhaustiveCheck(cv);\n}\n\n/**\n * Format clarity values in clarity style strings with the ability to prettify\n * the result with line break end space indentation.\n * @param cv The Clarity Value to format\n * @param space The indentation size of the output string. There's no indentation and no line breaks if space = 0\n * @example\n * ```ts\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }))\n * // { age: (some u42), id: u1 }\n *\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }, 2))\n * // {\n * //   age: (some u42),\n * //   id: u1\n * // }\n * ```\n */\nexport function stringify(cv: ClarityValue, space = 0): string {\n  return prettyPrintWithDepth(cv, space, 0);\n}\n\n/** @deprecated alias for {@link Cl.stringify} */\nexport const prettyPrint = stringify;\n","import { asciiToBytes, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  boolCV,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  serializeCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  tupleCV,\n  uintCV,\n} from './clarity';\n\nexport { prettyPrint, stringify } from './clarity/prettyPrint';\n\nexport { parse } from './clarity/parser';\n\n// todo: https://github.com/hirosystems/clarinet/issues/786\n\n// Primitives //////////////////////////////////////////////////////////////////\n/**\n * `Cl.bool` — Creates a Clarity boolean type, represented as a JS object\n *\n * Alias for {@link boolCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bool(true);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const bool = boolCV;\n/**\n * `Cl.int` — Creates a Clarity `int` type, represented as a JS object\n *\n * Alias for {@link intCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.int(-100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const int = intCV;\n/**\n * `Cl.uInt` — Creates a Clarity `uint` type, represented as a JS object\n *\n * Alias for {@link uintCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.uint(100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const uint = uintCV;\n\n/**\n * `Cl.principal` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.principal('ST000000000000000000002AMW42H');\n * Cl.principal('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport function principal(address: string) {\n  const [addr, name] = address.split('.');\n  return name ? contractPrincipalCV(addr, name) : standardPrincipalCV(addr);\n}\n/**\n * `Cl.address` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * Alias for {@link principal | `Cl.principal`}\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.address('ST000000000000000000002AMW42H');\n * Cl.address('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const address = principal;\n/**\n * `Cl.contractPrincipal` — Creates a Clarity contract `principal` type, represented as a JS object\n *\n * Alias for {@link contractPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.contractPrincipal('ST000000000000000000002AMW42H', 'asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const contractPrincipal = contractPrincipalCV;\n/**\n * `Cl.standardPrincipal` — Creates a Clarity standard `principal` type, represented as a JS object\n *\n * Alias for {@link standardPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.standardPrincipal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const standardPrincipal = standardPrincipalCV;\n\n// Sequences ///////////////////////////////////////////////////////////////////\n/**\n * `Cl.list` — Creates a Clarity `list` type, represented as a JS object\n *\n * Alias for {@link listCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.list([Cl.int(100), Cl.int(200)]);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const list = listCV;\n/**\n * `Cl.stringAscii` — Creates a Clarity `string-ascii` type, represented as a JS object\n *\n * Alias for {@link stringAsciiCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringAscii('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringAscii = stringAsciiCV;\n/**\n * `Cl.stringUtf8` — Creates a Clarity `string-utf8` type, represented as a JS object\n *\n * Alias for {@link stringUtf8CV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringUtf8('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringUtf8 = stringUtf8CV;\n/**\n * `Cl.buffer` — Creates a Clarity `buffer` type, represented as a JS object\n *\n * Alias for {@link bufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.buffer(Uint8Array.from([0x01, 0x02, 0x03]));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const buffer = bufferCV;\n/**\n * `Cl.bufferFromHex` — Converts bytes (from a hex string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a hex string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromHex('a1b2c3');\n * ```\n */\nexport const bufferFromHex = (hex: string) => bufferCV(hexToBytes(hex));\n/**\n * `Cl.bufferFromAscii` — Converts bytes (from an ASCII string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as an ASCII string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromAscii('hello world');\n * ```\n */\nexport const bufferFromAscii = (ascii: string) => bufferCV(asciiToBytes(ascii));\n/**\n * `Cl.bufferFromUtf8` — Converts bytes (from an UTF-8 string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a UTF-8 string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromUtf8('hello world');\n * ```\n */\nexport const bufferFromUtf8 = (utf8: string) => bufferCV(utf8ToBytes(utf8));\n\n// Composites //////////////////////////////////////////////////////////////////\n/**\n * `Cl.none` — Creates a Clarity optional `none` type, represented as a JS object\n *\n * Alias for {@link noneCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.none();\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const none = noneCV;\n/**\n * `Cl.some` — Creates a Clarity optional `some` type, represented as a JS object\n *\n * Alias for {@link someCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.some(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const some = someCV;\n/**\n * `Cl.ok` — Creates a Clarity response `ok` type, represented as a JS object\n *\n * Alias for {@link responseOkCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.ok(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const ok = responseOkCV;\n/**\n * `Cl.error` — Creates a Clarity response `error` type, represented as a JS object\n *\n * Alias for {@link responseErrorCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.error(Cl.uint(9900));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const error = responseErrorCV;\n/**\n * `Cl.tuple` — Creates a Clarity `tuple` type, represented as a JS object\n *\n * Alias for {@link tupleCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.tuple({\n *   a: Cl.uint(100),\n *   b: Cl.stringUtf8('hello world'),\n * })\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const tuple = tupleCV;\n\n// Methods /////////////////////////////////////////////////////////////////////\n/**\n * `Cl.serialize` — Serializes a Clarity JS object to the equivalent hex-encoded representation\n *\n * Alias for {@link serializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.serialize(Cl.uint(100));\n * ```\n * @see {@link deserialize}\n */\nexport const serialize = serializeCV;\n/**\n * `Cl.deserialize` — Deserializes a hex string to the equivalent Clarity JS object\n *\n * Alias for {@link deserializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.deserialize(\"0c00000001016103\");\n * ```\n * @see {@link serialize}\n */\nexport const deserialize = deserializeCV;\n\n// todo: add `deserializeReadable` methods that translates enums into name strings\n","import {\n  BooleanCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n  NoneCV,\n  SomeCV,\n  TrueCV,\n  FalseCV,\n} from '.';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, hexToBytes, utf8ToBytes } from '@stacks/common';\n\nexport type ClarityValue =\n  | BooleanCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | NoneCV\n  | SomeCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = bytesToAscii(hexToBytes(val.value));\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${val.value}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return val.value;\n    case ClarityType.List:\n      return `(list ${val.value.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.value)\n        .map(key => `(${key} ${cvToString(val.value[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.value}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.value}\"`;\n  }\n}\n\n/**\n * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when\n * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.\n * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.\n */\nexport function cvToValue(val: ClarityValue, strictJsonCompat: boolean = false): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return `0x${val.value}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return val.value;\n    case ClarityType.List:\n      return val.value.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.value).forEach(key => {\n        result[key] = cvToJSON(val.value[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.value;\n    case ClarityType.StringUTF8:\n      return val.value;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val, true) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${Math.ceil(val.value.length / 2)})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.value.length} ${\n        val.value.length ? getCVTypeString(val.value[0]) : 'UnknownType'\n      })`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.value)\n        .map(key => `(${key} ${getCVTypeString(val.value[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${asciiToBytes(val.value).length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${utf8ToBytes(val.value).length})`;\n  }\n}\n\ntype ClarityTypetoValue = {\n  [ClarityType.OptionalNone]: NoneCV;\n  [ClarityType.OptionalSome]: SomeCV;\n  [ClarityType.ResponseOk]: ResponseOkCV;\n  [ClarityType.ResponseErr]: ResponseErrorCV;\n  [ClarityType.BoolTrue]: TrueCV;\n  [ClarityType.BoolFalse]: FalseCV;\n  [ClarityType.Int]: IntCV;\n  [ClarityType.UInt]: UIntCV;\n  [ClarityType.StringASCII]: StringAsciiCV;\n  [ClarityType.StringUTF8]: StringUtf8CV;\n  [ClarityType.PrincipalStandard]: StandardPrincipalCV;\n  [ClarityType.PrincipalContract]: ContractPrincipalCV;\n  [ClarityType.List]: ListCV;\n  [ClarityType.Tuple]: TupleCV;\n  [ClarityType.Buffer]: BufferCV;\n};\n\n/**\n * Narrow down the type of a generic ClarityValue\n * @example\n * ```ts\n * // some functions can return a generic `ClarityValue` type\n * let value = callReadOnlyFunction();\n * //  ^ ClarityValue\n * // use `isClarityType` to narrow down the type\n * assert(isClarityType(value, ClarityType.Int))\n * console.log(value)\n * //          ^ IntCV\n * ```\n */\nexport function isClarityType<T extends ClarityType>(\n  input: ClarityValue,\n  withType: T\n): input is ClarityTypetoValue[T] {\n  return input.type === withType;\n}\n","/**\n * Clarity type names used for the human-readable representation of Clarity values\n */\nexport enum ClarityType {\n  Int = 'int',\n  UInt = 'uint',\n  Buffer = 'buffer',\n  BoolTrue = 'true',\n  BoolFalse = 'false',\n  PrincipalStandard = 'address',\n  PrincipalContract = 'contract',\n  ResponseOk = 'ok',\n  ResponseErr = 'err',\n  OptionalNone = 'none',\n  OptionalSome = 'some',\n  List = 'list',\n  Tuple = 'tuple',\n  StringASCII = 'ascii',\n  StringUTF8 = 'utf8',\n}\n\n/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityWireType {\n  int = 0x00,\n  uint = 0x01,\n  buffer = 0x02,\n  true = 0x03,\n  false = 0x04,\n  address = 0x05,\n  contract = 0x06,\n  ok = 0x07,\n  err = 0x08,\n  none = 0x09,\n  some = 0x0a,\n  list = 0x0b,\n  tuple = 0x0c,\n  ascii = 0x0d,\n  utf8 = 0x0e,\n}\n\n/** @ignore internal for now */\nexport function clarityTypeToByte(type: ClarityType): ClarityWireType {\n  return ClarityWireType[type];\n}\n\n/** @ignore internal for now */\nexport function clarityByteToType(wireType: ClarityWireType): ClarityType {\n  return ClarityWireType[wireType] as ClarityType; // numerical enums are bidirectional in TypeScript\n}\n","import { bytesToAscii, bytesToTwosBigInt, bytesToUtf8, hexToBytes } from '@stacks/common';\nimport {\n  ClarityValue,\n  ClarityWireType,\n  bufferCV,\n  contractPrincipalCVFromAddress,\n  falseCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  someCV,\n  standardPrincipalCVFromAddress,\n  stringAsciiCV,\n  stringUtf8CV,\n  trueCV,\n  tupleCV,\n  uintCV,\n} from '.';\nimport { BytesReader } from '../BytesReader';\nimport { DeserializationError } from '../errors';\nimport { deserializeAddress, deserializeLPString } from '../wire';\n\n/**\n * Deserializes clarity value to clarity type\n * @example\n * ```\n *  import { intCV, serializeCV, deserializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n *\n *  const deserialized = deserializeCV(serialized);\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function deserializeCV<T extends ClarityValue = ClarityValue>(\n  serializedClarityValue: BytesReader | Uint8Array | string\n): T {\n  let bytesReader: BytesReader;\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bytesReader = new BytesReader(\n      hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue)\n    );\n  } else if (serializedClarityValue instanceof Uint8Array) {\n    bytesReader = new BytesReader(serializedClarityValue);\n  } else {\n    bytesReader = serializedClarityValue;\n  }\n  const type = bytesReader.readUInt8Enum(ClarityWireType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityWireType.int:\n      return intCV(bytesToTwosBigInt(bytesReader.readBytes(16))) as T;\n\n    case ClarityWireType.uint:\n      return uintCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityWireType.buffer:\n      const bufferLength = bytesReader.readUInt32BE();\n      return bufferCV(bytesReader.readBytes(bufferLength)) as T;\n\n    case ClarityWireType.true:\n      return trueCV() as T;\n\n    case ClarityWireType.false:\n      return falseCV() as T;\n\n    case ClarityWireType.address:\n      const sAddress = deserializeAddress(bytesReader);\n      return standardPrincipalCVFromAddress(sAddress) as T;\n\n    case ClarityWireType.contract:\n      const cAddress = deserializeAddress(bytesReader);\n      const contractName = deserializeLPString(bytesReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName) as T;\n\n    case ClarityWireType.ok:\n      return responseOkCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.err:\n      return responseErrorCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.none:\n      return noneCV() as T;\n\n    case ClarityWireType.some:\n      return someCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.list:\n      const listLength = bytesReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bytesReader));\n      }\n      return listCV(listContents) as T;\n\n    case ClarityWireType.tuple:\n      const tupleLength = bytesReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bytesReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bytesReader);\n      }\n      return tupleCV(tupleContents) as T;\n\n    case ClarityWireType.ascii:\n      const asciiStrLen = bytesReader.readUInt32BE();\n      const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n      return stringAsciiCV(asciiStr) as T;\n\n    case ClarityWireType.utf8:\n      const utf8StrLen = bytesReader.readUInt32BE();\n      const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n      return stringUtf8CV(utf8Str) as T;\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import { Cl, ClarityValue, ListCV, TupleCV } from '..';\n\n// COMBINATOR TYPES\ntype Combinator = (str: string) => ParseResult;\n\ntype ParseResult = ParseSuccess | ParseFail;\n\ntype Capture = ClarityValue | string;\n\ninterface ParseSuccess {\n  success: true;\n  value: string;\n  rest: string;\n  capture?: Capture;\n}\n\ninterface ParseFail {\n  success: false;\n}\n\n// GENERAL COMBINATORS\nfunction regex(pattern: RegExp, map?: (value: string) => ClarityValue): Combinator {\n  return (s: string) => {\n    const match = s.match(pattern);\n    if (!match || match.index !== 0) return { success: false };\n    return {\n      success: true,\n      value: match[0],\n      rest: s.substring(match[0].length),\n      capture: map ? map(match[0]) : undefined,\n    };\n  };\n}\n\nfunction whitespace(): Combinator {\n  return regex(/\\s+/);\n}\n\nfunction lazy(c: () => Combinator): Combinator {\n  return (s: string) => c()(s);\n}\n\nfunction either(combinators: Combinator[]): Combinator {\n  return (s: string) => {\n    for (const c of combinators) {\n      const result = c(s);\n      if (result.success) return result;\n    }\n    return { success: false };\n  };\n}\n\nfunction entire(combinator: Combinator): Combinator {\n  return (s: string) => {\n    const result = combinator(s);\n    if (!result.success || result.rest) return { success: false };\n    return result;\n  };\n}\n\nfunction optional(c: Combinator): Combinator {\n  return (s: string) => {\n    const result = c(s);\n    if (result.success) return result;\n    return {\n      success: true,\n      value: '',\n      rest: s,\n    };\n  };\n}\n\nfunction sequence(\n  combinators: Combinator[],\n  reduce: (values: Capture[]) => Capture = v => v[0]\n): Combinator {\n  return (s: string) => {\n    let rest = s;\n    let value = '';\n    const captures: Capture[] = [];\n\n    for (const c of combinators) {\n      const result = c(rest);\n      if (!result.success) return { success: false };\n\n      rest = result.rest;\n      value += result.value;\n      if (result.capture) captures.push(result.capture);\n    }\n\n    return {\n      success: true,\n      value,\n      rest,\n      capture: reduce(captures),\n    };\n  };\n}\n\nfunction chain(\n  combinators: Combinator[],\n  reduce: (values: Capture[]) => Capture = v => v[0]\n): Combinator {\n  const joined = combinators.flatMap((combinator, index) =>\n    index === 0 ? [combinator] : [optional(whitespace()), combinator]\n  );\n  return sequence(joined, reduce);\n}\n\nfunction parens(combinator: Combinator): Combinator {\n  return chain([regex(/\\(/), combinator, regex(/\\)/)]);\n}\n\nfunction greedy(\n  min: number,\n  combinator: Combinator,\n  reduce: (values: Capture[]) => Capture = v => v[v.length - 1],\n  separator?: Combinator\n): Combinator {\n  return (s: string) => {\n    let rest = s;\n    let value = '';\n    const captures: Capture[] = [];\n\n    let count;\n    for (count = 0; ; count++) {\n      const result = combinator(rest);\n      if (!result.success) break;\n      rest = result.rest;\n      value += result.value;\n      if (result.capture) captures.push(result.capture);\n\n      if (separator) {\n        const sepResult = separator(rest);\n        if (!sepResult.success) {\n          count++; // count as matched but no trailing separator\n          break;\n        }\n        rest = sepResult.rest;\n        value += sepResult.value;\n      }\n    }\n\n    if (count < min) return { success: false };\n    return {\n      success: true,\n      value,\n      rest,\n      capture: reduce(captures),\n    };\n  };\n}\n\nfunction capture(combinator: Combinator, map?: (value: string) => Capture): Combinator {\n  return (s: string) => {\n    const result = combinator(s);\n    if (!result.success) return { success: false };\n    return {\n      success: true,\n      value: result.value,\n      rest: result.rest,\n      capture: map ? map(result.value) : result.value,\n    };\n  };\n}\n\n// CLARITY VALUE PARSERS\nfunction clInt(): Combinator {\n  return capture(regex(/\\-?[0-9]+/), v => Cl.int(parseInt(v)));\n}\n\nfunction clUint(): Combinator {\n  return sequence([regex(/u/), capture(regex(/[0-9]+/), v => Cl.uint(parseInt(v)))]);\n}\n\nfunction clBool(): Combinator {\n  return capture(regex(/true|false/), v => Cl.bool(v === 'true'));\n}\n\nfunction clPrincipal(): Combinator {\n  return sequence([\n    regex(/\\'/),\n    capture(\n      sequence([regex(/[A-Z0-9]+/), optional(sequence([regex(/\\./), regex(/[a-zA-Z0-9\\-]+/)]))]),\n      Cl.address\n    ),\n  ]);\n}\n\nfunction clBuffer(): Combinator {\n  return sequence([regex(/0x/), capture(regex(/[0-9a-fA-F]+/), Cl.bufferFromHex)]);\n}\n\n/** @ignore helper for string values, removes escaping and unescapes special characters */\nfunction unescape(input: string): string {\n  // To correctly unescape sequences like \\n, \\t, \\\", \\\\, \\uXXXX, etc.,\n  // we can leverage JSON.parse by wrapping the input string in double quotes.\n  // This ensures that all standard JSON escape sequences are handled according\n  // to the JSON specification, aligning with the test cases provided.\n  try {\n    return JSON.parse(`\"${input}\"`);\n  } catch (error) {\n    throw new Error(\n      `Failed to unescape string: \"${input}\" ${error instanceof Error ? error.message : error}`\n    );\n  }\n}\n\nfunction clAscii(): Combinator {\n  return sequence([\n    regex(/\"/),\n    capture(regex(/(\\\\.|[^\"])*/), t => Cl.stringAscii(unescape(t))),\n    regex(/\"/),\n  ]);\n}\n\nfunction clUtf8(): Combinator {\n  return sequence([\n    regex(/u\"/),\n    capture(regex(/(\\\\.|[^\"])*/), t => Cl.stringUtf8(unescape(t))),\n    regex(/\"/),\n  ]);\n}\n\nfunction clList(): Combinator {\n  return parens(\n    sequence([\n      regex(/list/),\n      greedy(0, sequence([whitespace(), clValue()]), c => Cl.list(c as ClarityValue[])),\n    ])\n  );\n}\n\nfunction clTuple(): Combinator {\n  const tupleCurly = chain([\n    regex(/\\{/),\n    greedy(\n      1,\n      // entries\n      sequence(\n        [\n          capture(regex(/[a-zA-Z][a-zA-Z0-9_]*/)), // key\n          regex(/\\s*\\:/),\n          whitespace(), // todo: can this be optional?\n          clValue(), // value\n        ],\n        ([k, v]) => Cl.tuple({ [k as string]: v as ClarityValue })\n      ),\n      c => Cl.tuple(Object.assign({}, ...c.map(t => (t as TupleCV).value))),\n      regex(/\\s*\\,\\s*/)\n    ),\n    regex(/\\}/),\n  ]);\n  const tupleFunction = parens(\n    sequence([\n      optional(whitespace()),\n      regex(/tuple/),\n      whitespace(),\n      greedy(\n        1,\n        parens(\n          // entries\n          sequence(\n            [\n              optional(whitespace()),\n              capture(regex(/[a-zA-Z][a-zA-Z0-9_]*/)), // key\n              whitespace(),\n              clValue(), // value\n              optional(whitespace()),\n            ],\n            ([k, v]) => Cl.tuple({ [k as string]: v as ClarityValue })\n          )\n        ),\n        c => Cl.tuple(Object.assign({}, ...c.map(t => (t as TupleCV).value))),\n        whitespace()\n      ),\n    ])\n  );\n  return either([tupleCurly, tupleFunction]);\n}\n\nfunction clNone(): Combinator {\n  return capture(regex(/none/), Cl.none);\n}\n\nfunction clSome(): Combinator {\n  return parens(\n    sequence([regex(/some/), whitespace(), clValue()], c => Cl.some(c[0] as ClarityValue))\n  );\n}\n\nfunction clOk(): Combinator {\n  return parens(sequence([regex(/ok/), whitespace(), clValue()], c => Cl.ok(c[0] as ClarityValue)));\n}\n\nfunction clErr(): Combinator {\n  return parens(\n    sequence([regex(/err/), whitespace(), clValue()], c => Cl.error(c[0] as ClarityValue))\n  );\n}\n\nfunction clValue(map: (combinator: Combinator) => Combinator = v => v) {\n  return either(\n    [\n      clBuffer,\n      clAscii,\n      clUtf8,\n      clInt,\n      clUint,\n      clBool,\n      clPrincipal,\n      clList,\n      clTuple,\n      clNone,\n      clSome,\n      clOk,\n      clErr,\n    ]\n      .map(lazy)\n      .map(map)\n  );\n}\n\n/**\n * Parse a piece of string text as Clarity value syntax.\n * Supports all Clarity value types (primitives, sequences, composite types).\n *\n * @example\n * ```\n * const repr = Cl.parse(\"u4\");\n * const repr = Cl.parse(`\"hello\"`);\n * const repr = Cl.parse('(tuple (a 1) (b 2))');\n * ```\n */\nexport function parse(clarityValueString: string): ClarityValue {\n  const result = clValue(entire)(clarityValueString);\n  if (!result.success || !result.capture) throw 'Parse error'; // todo: we can add better error messages and add position tracking\n  return result.capture as ClarityValue;\n}\n\n/** @ignore Meant for internal use by other Stacks.js packages. Not stable. */\nexport function internal_parseCommaSeparated(clarityValueString: string): ClarityValue[] {\n  const combinator = entire(\n    greedy(1, clValue(), c => Cl.list(c as ClarityValue[]), regex(/\\s*,\\s*/))\n  );\n  const result = combinator(clarityValueString);\n  if (!result.success || !result.capture)\n    throw `Error trying to parse string: ${clarityValueString}`;\n  return (result.capture as ListCV<ClarityValue>).value;\n}\n","import {\n  asciiToBytes,\n  bigIntToBytes,\n  bytesToHex,\n  concatArray,\n  concatBytes,\n  hexToBytes,\n  toTwos,\n  utf8ToBytes,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  BooleanCV,\n  BufferCV,\n  ClarityValue,\n  ContractPrincipalCV,\n  IntCV,\n  OptionalCV,\n  ResponseCV,\n  StandardPrincipalCV,\n  UIntCV,\n} from '.';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\nimport { SerializationError } from '../errors';\nimport { parseContractId } from '../utils';\nimport {\n  createAddress,\n  createLPString,\n  serializeAddressBytes,\n  serializeLPStringBytes,\n} from '../wire';\nimport { ClarityType, clarityTypeToByte } from './constants';\nimport { ListCV, StringAsciiCV, StringUtf8CV, TupleCV } from './types';\n\nfunction bytesWithTypeID(typeId: ClarityType, bytes: Uint8Array): Uint8Array {\n  return concatArray([clarityTypeToByte(typeId), bytes]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Uint8Array {\n  return new Uint8Array([clarityTypeToByte(value.type)]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Uint8Array {\n  if (cv.type === ClarityType.OptionalNone) {\n    return new Uint8Array([clarityTypeToByte(cv.type)]);\n  } else {\n    return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Uint8Array {\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Math.ceil(cv.value.length / 2), 0);\n  return bytesWithTypeID(cv.type, concatBytes(length, hexToBytes(cv.value)));\n}\n\nfunction serializeIntCV(cv: IntCV): Uint8Array {\n  const bytes = bigIntToBytes(\n    toTwos(BigInt(cv.value), BigInt(CLARITY_INT_SIZE)),\n    CLARITY_INT_BYTE_SIZE\n  );\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeUIntCV(cv: UIntCV): Uint8Array {\n  const bytes = bigIntToBytes(BigInt(cv.value), CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Uint8Array {\n  return bytesWithTypeID(cv.type, serializeAddressBytes(createAddress(cv.value)));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Uint8Array {\n  const [address, name] = parseContractId(cv.value);\n  return bytesWithTypeID(\n    cv.type,\n    concatBytes(\n      serializeAddressBytes(createAddress(address)),\n      serializeLPStringBytes(createLPString(name))\n    )\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.value.length, 0);\n  bytesArray.push(length);\n\n  for (const value of cv.value) {\n    const serializedValue = serializeCVBytes(value);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Object.keys(cv.value).length, 0);\n  bytesArray.push(length);\n\n  const lexicographicOrder = Object.keys(cv.value).sort((a, b) => a.localeCompare(b));\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    bytesArray.push(serializeLPStringBytes(nameWithLength));\n\n    const serializedValue = serializeCVBytes(cv.value[key]);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const bytesArray = [];\n\n  const str = encoding == 'ascii' ? asciiToBytes(cv.value) : utf8ToBytes(cv.value);\n  const len = new Uint8Array(4);\n  writeUInt32BE(len, str.length, 0);\n\n  bytesArray.push(len);\n  bytesArray.push(str);\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\n/**\n * Serializes clarity value to hex\n * @example\n * ```\n *  import { intCV, serializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *  // '0000000000000000000000000000000064'\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function serializeCV(value: ClarityValue): string {\n  return bytesToHex(serializeCVBytes(value));\n}\n\n/** @ignore */\nexport function serializeCVBytes(value: ClarityValue): Uint8Array {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.UInt:\n      return serializeUIntCV(value);\n    case ClarityType.Int:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { ClarityType } from '../constants';\nimport { BooleanCV } from '../types';\n\n/**\n * Converts true to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { trueCV } from '@stacks/transactions';\n *\n *  const trueCV = trueCV();\n *  // { type: 'true' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\n\n/**\n * Converts false to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { falseCV } from '@stacks/transactions';\n *\n *  const falseCV = falseCV();\n *  // { type: 'false' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\n/**\n * Converts a boolean to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { boolCV } from '@stacks/transactions';\n *\n *  const boolCV = boolCV(false);\n *  // { type: 'false' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const boolCV = (bool: boolean) => (bool ? trueCV() : falseCV());\n","import { bytesToHex, utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\nimport { BufferCV } from '../types';\n\n/**\n * Converts a Uint8Array to a BufferCV clarity type\n *\n * @param {Uint8Array} buffer value to be converted to clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCV } from '@stacks/transactions';\n *\n *  const buffer = utf8ToBytes('this is a test');\n *  const buf = bufferCV(buffer);\n *  // { type: 'buffer', buffer: <Uint8Array 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const bufferCV = (buffer: Uint8Array): BufferCV => {\n  // max size 1024 * 1024 = 1MB; https://github.com/stacks-network/stacks-core/blob/c50a93088d7c0261f1dbe31ab24b95028a038447/clarity/src/vm/types/mod.rs#L47\n  if (buffer.byteLength > 1_048_576) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, value: bytesToHex(buffer) };\n};\n\n/**\n * Converts a string to BufferCV clarity type\n *\n * @param {str} string input to be converted to bufferCV clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCVFromString } from '@stacks/transactions';\n *\n *  const str = 'this is a test';\n *  const buf = bufferCVFromString(str);\n *  // { type: 'buffer', buffer: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n *```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const bufferCVFromString = (str: string): BufferCV => bufferCV(utf8ToBytes(str));\n","import {\n  IntegerType,\n  bytesToTwosBigInt,\n  hexToBytes,\n  intToBigInt,\n  isInstance,\n} from '@stacks/common';\nimport { ClarityType } from '../constants';\nimport { IntCV, UIntCV } from '../types';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array\n *  // { type: 'int', value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const intCV = (value: IntegerType): IntCV => {\n  // ensure compatibility with twos-complement encoded hex-strings\n  if (typeof value === 'string' && value.toLowerCase().startsWith('0x')) {\n    value = bytesToTwosBigInt(hexToBytes(value));\n  }\n\n  // ensure compatibility with twos-complement encoded byte arrays\n  if (isInstance(value, Uint8Array)) value = bytesToTwosBigInt(value);\n\n  const bigInt = intToBigInt(value);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array\n *  // { type: 'uint', value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { ListCV } from '../types';\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue[]} list of ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} instance of type ListCV<T> of the provided values\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 'list', list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, value: values };\n}\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { NoneCV, OptionalCV } from '../types';\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 'none' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 'some', value: { type: 'true' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nexport function optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  return value ? someCV(value) : noneCV();\n}\n","import { utf8ToBytes } from '@stacks/common';\nimport {\n  AddressWire,\n  LengthPrefixedStringWire,\n  addressToString,\n  createAddress,\n  createLPString,\n} from '../../wire';\nimport { ClarityType } from '../constants';\nimport { ContractPrincipalCV, PrincipalCV, StandardPrincipalCV } from '../types';\n\nexport function principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 'address', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, value: addressToString(addr) };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 'address', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function standardPrincipalCVFromAddress(address: AddressWire): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, value: addressToString(address) };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} string containing contract name\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 'contract', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function contractPrincipalCV(\n  addressString: string,\n  contractName: string\n): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} contract name of type LengthPrefixedString\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 'contract', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function contractPrincipalCVFromAddress(\n  address: AddressWire,\n  contractName: LengthPrefixedStringWire\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return {\n    type: ClarityType.PrincipalContract,\n    value: `${addressToString(address)}.${contractName.content}`,\n  };\n}\n\nexport function contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  return {\n    type: ClarityType.PrincipalContract,\n    value: `${sp.value}.${contractName}`,\n  };\n}\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { ResponseErrorCV, ResponseOkCV } from '../types';\n\n/**\n * Converts ClarityValue to responseErrorCV\n *\n * @param {value} ClarityValue value to be converted to responseErrorCV clarity type\n *\n * @returns {responseErrorCV} returns instance of type responseErrorCV\n *\n * @example\n * ```\n *  import { responseErrorCV, intCV } from '@stacks/transactions';\n *\n *  const respErrorCV = responseErrorCV(intCV(1));\n *\n *  // { type: 'err', value: { type: 'int', value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function responseErrorCV<T extends ClarityValue = ClarityValue>(\n  value: T\n): ResponseErrorCV<T> {\n  return { type: ClarityType.ResponseErr, value };\n}\n\n/**\n * Converts ClarityValue to ResponseOkCV\n *\n * @param {value} ClarityValue value to be converted to ResponseOkCV clarity type\n *\n * @returns {ResponseOkCV} returns instance of type ResponseOkCV\n *\n * @example\n * ```\n *  import { responseOkCV, intCV } from '@stacks/transactions';\n *\n *  const respOKCV = responseOkCV(intCV(1));\n *\n *  // { type: 'ok', value: { type: 'int', value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function responseOkCV<T extends ClarityValue = ClarityValue>(value: T): ResponseOkCV<T> {\n  return { type: ClarityType.ResponseOk, value };\n}\n","import { ClarityType } from '../constants';\nimport { StringAsciiCV, StringUtf8CV } from '../types';\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 'ascii', data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, value: data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 'utf8', data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, value: data };\n};\n\n/**\n * @ignore\n */\nexport const stringCV = (\n  data: string,\n  encoding: 'ascii' | 'utf8'\n): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringUtf8CV(data);\n  }\n};\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\nimport { TupleCV, TupleData } from '../types';\n\n/**\n * Create tuple of clarity values\n *\n * @param {tupleData} tuple value to be converted to tuple of clarity types\n *\n * @returns {TupleCV} returns instance of type clarity tuple\n *\n * @example\n * ```\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\n *\n *  const tuple = tupleCV({\n *    c: trueCV(),\n *    b: falseCV(),\n *    a: trueCV(),\n *  });\n *  // { type: 'tuple', data: { c: { type: 'true' }, b: { type: 'false' }, a: { type: 'true' } } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function tupleCV<T extends ClarityValue = ClarityValue>(\n  data: TupleData<T>\n): TupleCV<TupleData<T>> {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, value: data };\n}\n","/** @ignore internal */\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n\nexport const MAX_STRING_LENGTH_BYTES = 128;\nexport const CLARITY_INT_SIZE = 128;\nexport const CLARITY_INT_BYTE_SIZE = 16;\nexport const COINBASE_BYTES_LENGTH = 32;\nexport const VRF_PROOF_BYTES_LENGTH = 80;\nexport const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nexport const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nexport const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nexport const MEMO_MAX_LENGTH_BYTES = 34;\n\n// https://github.com/stacks-network/stacks-core/blob/31d048c6c345c8cb7be38283385e54870b1c3c83/stacks-common/src/codec/mod.rs#L206\n// messages can't be bigger than 16MB plus the preamble and relayers\nconst MAX_PAYLOAD_LEN = 1 + 16 * 1024 * 1024;\nconst PREAMBLE_ENCODED_SIZE = 165;\nconst MAX_RELAYERS_LEN = 16;\nconst PEER_ADDRESS_ENCODED_SIZE = 16;\nconst HASH160_ENCODED_SIZE = 20;\nconst NEIGHBOR_ADDRESS_ENCODED_SIZE = PEER_ADDRESS_ENCODED_SIZE + 2 + HASH160_ENCODED_SIZE;\nconst RELAY_DATA_ENCODED_SIZE = NEIGHBOR_ADDRESS_ENCODED_SIZE + 4;\nexport const STRING_MAX_LENGTH =\n  MAX_PAYLOAD_LEN + (PREAMBLE_ENCODED_SIZE + MAX_RELAYERS_LEN * RELAY_DATA_ENCODED_SIZE);\n\n/**\n * The type of transaction (payload) that is being serialized.\n * Used internally for serializing and deserializing transactions.\n */\nexport enum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  VersionedSmartContract = 0x06,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n  CoinbaseToAltRecipient = 0x05,\n  TenureChange = 0x7,\n  NakamotoCoinbase = 0x08,\n}\n\n/**\n * The version of Clarity used to deploy a smart contract.\n * Most methods will default to the latest available version of Clarity.\n */\nexport enum ClarityVersion {\n  Clarity1 = 1,\n  Clarity2 = 2,\n  Clarity3 = 3,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update.\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nexport enum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\n/** @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update. */\nexport const AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'] as const;\n/** @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update. */\nexport type AnchorModeName = (typeof AnchorModeNames)[number];\n\nconst AnchorModeMap = {\n  [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n  [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n  [AnchorModeNames[2]]: AnchorMode.Any,\n  [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n  [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n  [AnchorMode.Any]: AnchorMode.Any,\n};\n\n/** @ignore @deprecated Block anchor modes don't exist on-chain anymore. */\nexport function anchorModeFrom(mode: AnchorModeName | AnchorMode): AnchorMode {\n  if (mode in AnchorModeMap) return AnchorModeMap[mode];\n  throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\n\n/**\n * How to treat unspecified transfers of a transaction.\n * Used for creating transactions.\n *\n * Post-conditions are **always** be validated by nodes, regardless of the {@link PostConditionMode}.\n * `PostConditionMode.Allow` will allow additional (aka unspecified) transfers, while `PostConditionMode.Deny` will not.\n */\nexport enum PostConditionMode {\n  /** `Allow` — Allow unspecified transfers */\n  Allow = 0x01,\n  /** `Deny` — Do not allow unspecified transfers */\n  Deny = 0x02,\n}\n\n/**\n * The type of asset a post-condition is referring to.\n * Used for serializing post-conditions.\n */\nexport enum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\n/**\n * The sponsorship mode of a transaction.\n *\n * Specifies whether a transaction is sponsored or not.\n */\nexport enum AuthType {\n  /** `Standard` (not sponsored) — The transaction is not sponsored. The sender will need to spend fees. */\n  Standard = 0x04,\n  /** `Sponsored` — The transaction is sponsored. The sponsor will spend fees on behalf of the sender. */\n  Sponsored = 0x05,\n}\n\n/**\n * Serialization modes for public keys to addresses.\n * Four different modes are supported due to legacy compatibility with Stacks v1 addresses.\n */\nexport enum AddressHashMode {\n  /** `SingleSigHashMode` — hash160(public-key), same as bitcoin's p2pkh */\n  P2PKH = 0x00,\n  /** Legacy `MultiSigHashMode` — hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  P2SH = 0x01,\n  /** `SingleSigHashMode` — hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  P2WPKH = 0x02,\n  /** Legacy `MultiSigHashMode` — hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  P2WSH = 0x03,\n  /** Non-Sequential `MultiSigHashMode` — hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  P2SHNonSequential = 0x05,\n  /** Non-Sequential `MultiSigHashMode` — hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  P2WSHNonSequential = 0x07,\n\n  // todo: once live, rename to remove `NonSequential` and add `Legacy` to sequential mutlisig\n}\n\nexport type SingleSigHashMode = AddressHashMode.P2PKH | AddressHashMode.P2WPKH;\nexport type MultiSigHashMode =\n  | AddressHashMode.P2SH\n  | AddressHashMode.P2WSH\n  | AddressHashMode.P2SHNonSequential\n  | AddressHashMode.P2WSHNonSequential;\n\n// re-export for backwards compatibility\nexport { AddressVersion } from '@stacks/network';\n\n// todo: try to remove this\nexport enum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\n/**\n * The type of fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\n/**\n * The type of non-fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum NonFungibleConditionCode {\n  Sends = 0x10,\n  DoesNotSend = 0x11,\n}\n\n/**\n * The type of sender for a post-condition.\n */\nexport enum PostConditionPrincipalId {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\n/**\n * The type of asset used in a post-condition.\n */\nexport enum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nexport enum TenureChangeCause {\n  /** A valid winning block-commit */\n  BlockFound = 0,\n  /** The next burnchain block is taking too long, so extend the runtime budget */\n  Extended = 1,\n}\n\nexport enum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\n// todo: refactor this, if only used in one place, just use a string\n/** @ignore */\nexport enum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n","import { hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  ClarityType,\n  ClarityValue,\n  bufferCV,\n  bufferCVFromString,\n  contractPrincipalCV,\n  falseCV,\n  getCVTypeString,\n  intCV,\n  noneCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  trueCV,\n  uintCV,\n} from './clarity';\nimport { NotImplementedError } from './errors';\nimport { cloneDeep } from './utils';\nimport { ContractCallPayload } from './wire';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\n/**\n * Convert a string to a Clarity value based on the ABI type.\n *\n * Currently does NOT support some nested Clarity ABI types:\n * - ClarityAbiTypeResponse\n * - ClarityAbiTypeTuple\n * - ClarityAbiTypeList\n */\nexport function encodeAbiClarityValue(\n  value: string,\n  type: ClarityAbiType | ClarityAbiTypeUnion\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (value === 'false' || value === '0') return falseCV();\n      else if (value === 'true' || value === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(value)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (value.includes('.')) {\n        const [addr, name] = value.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(value);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = value.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(hexToBytes(value));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      return someCV(encodeAbiClarityValue(value, union.type.optional));\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\n\n/** @deprecated due to a breaking bug for the buffer encoding case, this was fixed and renamed to {@link clarityAbiStringToCV} */\nexport function encodeClarityValue(type: ClarityAbiType, value: string): ClarityValue;\nexport function encodeClarityValue(type: ClarityAbiTypeUnion, value: string): ClarityValue;\nexport function encodeClarityValue(\n  type: ClarityAbiTypeUnion | ClarityAbiType,\n  value: string\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n\n  if (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer) {\n    return bufferCV(utf8ToBytes(value)); // legacy behavior\n  }\n\n  return encodeAbiClarityValue(value, union);\n}\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: ClarityAbiType;\n  value: ClarityAbiType;\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= Math.ceil(cv.value.length / 2)\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.value.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.value.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.value.length &&\n        cv.value.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.value);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","class TransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class DeserializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Thrown when `NoEstimateAvailable` is received as an error reason from a\n * Stacks node. The Stacks node has not seen this kind of contract-call before,\n * and it cannot provide an estimate yet.\n * @see https://docs.hiro.so/api#tag/Fees/operation/post_fee_transaction\n */\nexport class NoEstimateAvailableError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class NotImplementedError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class SigningError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class VerificationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n","import { bytesToHex, validateHash256, with0x } from '@stacks/common';\nimport { NetworkClientParam, clientFromNetwork, networkFrom } from '@stacks/network';\nimport { ClarityValue, NoneCV, deserializeCV, serializeCV } from './clarity';\nimport { ClarityAbi } from './contract-abi';\nimport { NoEstimateAvailableError } from './errors';\nimport {\n  StacksTransactionWire,\n  deriveNetworkFromTx,\n  estimateTransactionByteLength,\n} from './transaction';\nimport {\n  FeeEstimateResponse,\n  FeeEstimation,\n  TxBroadcastResult,\n  TxBroadcastResultOk,\n  TxBroadcastResultRejected,\n} from './types';\nimport { cvToHex, parseReadOnlyResponse } from './utils';\nimport { serializePayloadBytes } from './wire';\n\nexport const BROADCAST_PATH = '/v2/transactions';\nexport const TRANSFER_FEE_ESTIMATE_PATH = '/v2/fees/transfer';\nexport const TRANSACTION_FEE_ESTIMATE_PATH = '/v2/fees/transaction';\nexport const ACCOUNT_PATH = '/v2/accounts';\nexport const CONTRACT_ABI_PATH = '/v2/contracts/interface';\nexport const READONLY_FUNCTION_CALL_PATH = '/v2/contracts/call-read';\nexport const MAP_ENTRY_PATH = '/v2/map_entry';\n\n/**\n * Broadcast a serialized transaction to a Stacks node (which will validate and forward to the network).\n * @param opts.transaction - The transaction to broadcast\n * @param opts.attachment - Optional attachment encoded as a hex string\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns A Promise that resolves to a {@link TxBroadcastResult} object\n */\nexport async function broadcastTransaction({\n  transaction: txOpt,\n  attachment: attachOpt,\n  network: _network,\n  client: _client,\n}: {\n  /** The transaction to broadcast */\n  transaction: StacksTransactionWire;\n  /** Optional attachment in bytes or encoded as a hex string */\n  attachment?: Uint8Array | string;\n} & NetworkClientParam): Promise<TxBroadcastResult> {\n  const tx = txOpt.serialize();\n  const attachment = attachOpt\n    ? typeof attachOpt === 'string'\n      ? attachOpt\n      : bytesToHex(attachOpt)\n    : undefined;\n  const json = attachOpt ? { tx, attachment } : { tx };\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(json),\n  };\n\n  const network = _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${BROADCAST_PATH}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResultRejected;\n    } catch (e) {\n      throw Error('Failed to broadcast transaction (unable to parse node response).', { cause: e });\n    }\n  }\n\n  const text = await response.text();\n  const txid = text.replace(/[\"]+/g, ''); // Replace extra quotes around txid string\n  if (!validateHash256(txid)) throw new Error(text);\n\n  return { txid } as TxBroadcastResultOk;\n}\n\n/** @internal */\nasync function _getNonceApi({\n  address,\n  network = 'mainnet',\n  client: _client,\n}: { address: string } & NetworkClientParam): Promise<bigint> {\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}/extended/v1/address/${address}/nonces`;\n  const response = await client.fetch(url);\n  const result = await response.json();\n  return BigInt(result.possible_next_nonce);\n}\n\n/**\n * Lookup the nonce for an address from a core node\n * @param opts.address - The Stacks address to look up the next nonce for\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to an integer\n */\nexport async function fetchNonce(\n  opts: {\n    /** The Stacks address to look up the next nonce for */\n    address: string;\n  } & NetworkClientParam\n): Promise<bigint> {\n  // Try API first\n  try {\n    return await _getNonceApi(opts);\n  } catch (e) {}\n\n  const network = networkFrom(opts.network ?? 'mainnet');\n  const client = Object.assign({}, clientFromNetwork(network), opts.client);\n  const url = `${client.baseUrl}${ACCOUNT_PATH}/${opts.address}?proof=0`;\n  const response = await client.fetch(url);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const json = (await response.json()) as { nonce: string };\n  return BigInt(json.nonce);\n}\n\n/**\n * @deprecated Use the new {@link fetchFeeEstimateTransaction} function instead.\n *\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * ⚠ Only sensible for token transfer transactions!\n * @param opts.transaction - The token transfer transaction to estimate fees for (or its estimated length in bytes)\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to number of microstacks per byte\n */\nexport async function fetchFeeEstimateTransfer({\n  transaction: txOpt,\n  network: _network,\n  client: _client,\n}: {\n  /** The token transfer transaction to estimate fees for (or its estimated length in bytes) */\n  transaction: StacksTransactionWire | number;\n} & NetworkClientParam): Promise<bigint> {\n  const network = typeof txOpt === 'number' ? 'mainnet' : _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n\n  const url = `${client.baseUrl}${TRANSFER_FEE_ESTIMATE_PATH}`;\n  const response = await client.fetch(url, {\n    headers: { Accept: 'application/text' },\n  });\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating transfer fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const feeRateResult = await response.text();\n  const txBytes =\n    typeof txOpt === 'number'\n      ? BigInt(txOpt)\n      : BigInt(Math.ceil(txOpt.serializeBytes().byteLength));\n  const feeRate = BigInt(feeRateResult);\n  return feeRate * txBytes;\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a Stacks transaction\n * @param opts.payload - The transaction to estimate fees for\n * @param opts.estimatedLength - Optional estimation of the final length (in\n * bytes) of the transaction, including any post-conditions and signatures\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to FeeEstimate\n */\nexport async function fetchFeeEstimateTransaction({\n  payload,\n  estimatedLength,\n  network = 'mainnet',\n  client: _client,\n}: {\n  payload: string;\n  estimatedLength?: number;\n} & NetworkClientParam): Promise<[FeeEstimation, FeeEstimation, FeeEstimation]> {\n  const json = {\n    transaction_payload: payload,\n    estimated_len: estimatedLength,\n  };\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(json),\n  };\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${TRANSACTION_FEE_ESTIMATE_PATH}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const body = await response.text().catch(() => '');\n\n    if (body.includes('NoEstimateAvailable')) {\n      let json: { reason_data?: { message?: string } } = {};\n      try {\n        json = JSON.parse(body);\n      } catch (err) {\n        // ignore\n      }\n      throw new NoEstimateAvailableError(json?.reason_data?.message ?? '');\n    }\n\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`\n    );\n  }\n\n  const data: FeeEstimateResponse = await response.json();\n  return data.estimations;\n}\n\n/**\n * Estimates the fee using {@link fetchFeeEstimateTransaction}, but retries to estimate\n * with {@link fetchFeeEstimateTransfer} as a fallback if does not get an estimation due\n * to the {@link NoEstimateAvailableError} error.\n * @param opts.transaction - The transaction to estimate fees for\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n */\nexport async function fetchFeeEstimate({\n  transaction: txOpt,\n  network: _network,\n  client: _client,\n}: {\n  transaction: StacksTransactionWire;\n} & NetworkClientParam): Promise<bigint | number> {\n  const network = _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n\n  try {\n    const estimatedLength = estimateTransactionByteLength(txOpt);\n    return (\n      await fetchFeeEstimateTransaction({\n        payload: bytesToHex(serializePayloadBytes(txOpt.payload)),\n        estimatedLength,\n        network,\n        client,\n      })\n    )[1].fee;\n  } catch (error) {\n    if (!(error instanceof NoEstimateAvailableError)) throw error;\n    return await fetchFeeEstimateTransfer({ transaction: txOpt, network });\n  }\n}\n\n/**\n * Fetch a contract's ABI\n * @param opts.address - The contracts address\n * @param opts.contractName - The contracts name\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns A promise that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function fetchAbi({\n  contractAddress: address,\n  contractName: name,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractAddress: string;\n  contractName: string;\n} & NetworkClientParam): Promise<ClarityAbi> {\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${CONTRACT_ABI_PATH}/${address}/${name}`;\n  const response = await client.fetch(url);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching contract ABI for contract \"${name}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\n/**\n * Calls a function as read-only from a contract interface.\n * It is not necessary that the function is defined as read-only in the contract\n * @param opts.contractName - The contract name\n * @param opts.contractAddress - The contract address\n * @param opts.functionName - The contract function name\n * @param opts.functionArgs - The contract function arguments\n * @param opts.senderAddress - The address of the (simulated) sender\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return Returns an object with a status bool (okay) and a result string that\n * is a serialized clarity value in hex format.\n */\nexport async function fetchCallReadOnlyFunction({\n  contractName,\n  contractAddress,\n  functionName,\n  functionArgs,\n  senderAddress,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** address of the sender */\n  senderAddress: string;\n} & NetworkClientParam): Promise<ClarityValue> {\n  const json = {\n    sender: senderAddress,\n    arguments: functionArgs.map(arg => cvToHex(arg)),\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(json),\n  };\n\n  const name = encodeURIComponent(functionName);\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${READONLY_FUNCTION_CALL_PATH}/${contractAddress}/${contractName}/${name}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return await response.json().then(parseReadOnlyResponse);\n}\n\n/**\n * Fetch data from a contract data map.\n * @param opts.contractAddress - The contract address\n * @param opts.contractName - The contract name\n * @param opts.mapName - The map variable name\n * @param opts.mapKey - The key of the map entry to look up\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns Promise that resolves to a ClarityValue if the operation succeeds.\n * Resolves to NoneCV if the map does not contain the given key, if the map does not exist, or if the contract prinicipal does not exist\n */\nexport async function fetchContractMapEntry<T extends ClarityValue = ClarityValue>({\n  contractAddress,\n  contractName,\n  mapName,\n  mapKey,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractAddress: string;\n  contractName: string;\n  mapName: string;\n  mapKey: ClarityValue;\n} & NetworkClientParam): Promise<T | NoneCV> {\n  const keyHex = with0x(serializeCV(mapKey));\n\n  const options = {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(keyHex), // endpoint expects a JSON string atom (quote wrapped string)\n  };\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${MAP_ENTRY_PATH}/${contractAddress}/${contractName}/${mapName}?proof=0`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const json: { data?: string } = await response.json();\n  if (!json.data) {\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${\n        response.status\n      }: ${response.statusText}. Attempted to fetch ${\n        client.baseUrl\n      } and failed with the response: \"${JSON.stringify(json)}\"`\n    );\n  }\n\n  try {\n    return deserializeCV<T>(json.data);\n  } catch (error) {\n    throw new Error(`Error deserializing Clarity value \"${json.data}\": ${error}`);\n  }\n}\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n    if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n        throw new Error('Invalid signature');\n    }\n    const recoveryIdHex = signature.slice(0, 2);\n    const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n    const s = signature.slice(2 + COORDINATE_BYTES * 2);\n    return {\n        recoveryId: hexToInt(recoveryIdHex),\n        r,\n        s,\n    };\n}\nexport function signatureVrsToRsv(signature) {\n    return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n    return signature.slice(-2) + signature.slice(0, -2);\n}\n//# sourceMappingURL=signatures.js.map","import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n    const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n    if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n        throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n    }\n    if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n        throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n    }\n    return privateKeyBuffer;\n}\n//# sourceMappingURL=keys.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey as nobleGetPublicKey,\n  Point,\n  Signature,\n  signSync,\n  utils,\n} from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  hexToBigInt,\n  hexToBytes,\n  intToHex,\n  parseRecoverableSignatureVrs,\n  PRIVATE_KEY_BYTES_COMPRESSED,\n  PrivateKey,\n  privateKeyToBytes,\n  PublicKey,\n  signatureRsvToVrs,\n  signatureVrsToRsv,\n} from '@stacks/common';\nimport { networkFrom, STACKS_MAINNET, StacksNetwork, StacksNetworkName } from '@stacks/network';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion } from './address';\nimport { AddressHashMode, AddressVersion, PubKeyEncoding } from './constants';\nimport { hash160, hashP2PKH } from './utils';\nimport { addressFromVersionHash, addressToString, PublicKeyWire, StacksWireType } from './wire';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key bytes or hex string */\n  privateKey: PrivateKey,\n  network: StacksNetworkName | StacksNetwork = 'mainnet'\n): string {\n  network = networkFrom(network);\n  const publicKey = privateKeyToPublic(privateKey);\n  return getAddressFromPublicKey(publicKey, network);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key bytes or hex string */\n  publicKey: PublicKey,\n  network: StacksNetworkName | StacksNetwork = 'mainnet'\n): string {\n  network = networkFrom(network);\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  const addrVer = addressHashModeToVersion(AddressHashMode.P2PKH, network);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(publicKey));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(publicKey: PublicKey): PublicKeyWire {\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return {\n    type: StacksWireType.PublicKey,\n    data: publicKey,\n  };\n}\n\nexport function publicKeyFromSignatureVrs(\n  messageHash: string,\n  messageSignature: string,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  const parsedSignature = parseRecoverableSignatureVrs(messageSignature);\n  const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n  const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n  const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n  return point.toHex(compressed);\n}\n\nexport function publicKeyFromSignatureRsv(\n  messageHash: string,\n  messageSignature: string,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  return publicKeyFromSignatureVrs(\n    messageHash,\n    signatureRsvToVrs(messageSignature),\n    pubKeyEncoding\n  );\n}\n\nexport function privateKeyToHex(publicKey: PublicKey): string {\n  return typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n}\nexport const publicKeyToHex = privateKeyToHex;\n\n/**\n * Checks if a private key is compressed\n *\n * @example\n * ```ts\n * isPrivateKeyCompressed('64879bd015b0fbc19a798040b399b59c3c756cc79eaa9d24d18e66106ad7ee4801'); // true\n * isPrivateKeyCompressed('64879bd015b0fbc19a798040b399b59c3c756cc79eaa9d24d18e66106ad7ee48'); // false\n * ```\n */\nexport const isPrivateKeyCompressed = privateKeyIsCompressed;\n\n/** @deprecated Use {@link isPrivateKeyCompressed} instead */\nexport function privateKeyIsCompressed(privateKey: PrivateKey): boolean {\n  const length = typeof privateKey === 'string' ? privateKey.length / 2 : privateKey.byteLength;\n  return length === PRIVATE_KEY_BYTES_COMPRESSED;\n}\n\n/**\n * Checks if a public key is compressed\n *\n * @example\n * ```ts\n * isPublicKeyCompressed('0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b'); // true\n * isPublicKeyCompressed('04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6'); // false\n * ```\n */\nexport const isPublicKeyCompressed = publicKeyIsCompressed;\n\n/** @deprecated Use {@link isPublicKeyCompressed} instead */\nexport function publicKeyIsCompressed(publicKey: PublicKey): boolean {\n  return !publicKeyToHex(publicKey).startsWith('04');\n}\n\n/**\n * Get the public key from a private key.\n * Allows for \"compressed\" and \"uncompressed\" private keys.\n * > Matches legacy `pubKeyfromPrivKey`, `getPublic` function behavior\n */\nexport function privateKeyToPublic(privateKey: PrivateKey): PublicKey {\n  privateKey = privateKeyToBytes(privateKey);\n  const isCompressed = privateKeyIsCompressed(privateKey);\n  return bytesToHex(nobleGetPublicKey(privateKey.slice(0, 32), isCompressed));\n}\n\n/**\n * Compresses a public key\n *\n * @example\n * ```ts\n * compressPublicKey('04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6');\n * // '0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b'\n * ```\n */\nexport function compressPublicKey(publicKey: PublicKey): string {\n  return Point.fromHex(publicKeyToHex(publicKey)).toHex(true);\n}\n\n/**\n * Uncompresses a public key\n *\n * @example\n * ```ts\n * uncompressPublicKey('0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b');\n * // '04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6'\n * ```\n */\nexport function uncompressPublicKey(publicKey: PublicKey): string {\n  return Point.fromHex(publicKeyToHex(publicKey)).toHex(false);\n}\n\n/** @deprecated Use {@link randomPrivateKey} instead */\nexport const makeRandomPrivKey = randomPrivateKey;\n\n/**\n * Generate a random private key (compressed)\n *\n * @example\n * ```ts\n * const privateKey = randomPrivateKey();\n * // 'f5a31c1268a1e37d4edaa05c7d11183c5fbfdcdc48aae36ea4d8cd5cb709932801'\n * ```\n */\nexport function randomPrivateKey(): string {\n  return compressPrivateKey(utils.randomPrivateKey());\n}\n\n/**\n * @deprecated The Clarity compatible {@link signMessageHashRsv} is preferred, but differs in signature format\n * @returns A recoverable signature (in VRS order)\n */\nexport function signWithKey(privateKey: PrivateKey, messageHash: string): string {\n  privateKey = privateKeyToBytes(privateKey);\n  const [rawSignature, recoveryId] = signSync(messageHash, privateKey.slice(0, 32), {\n    canonical: true,\n    recovered: true,\n  });\n  if (recoveryId == null) {\n    throw new Error('No signature recoveryId received');\n  }\n  const recoveryIdHex = intToHex(recoveryId, 1);\n  return recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex(); // V + RS\n}\n\n/**\n * Signs a message hash using a private key. The resulting signature along with\n * the original message can be verified using {@link verifyMessageSignatureRsv}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signMessageHashRsv({\n  messageHash,\n  privateKey,\n}: {\n  messageHash: string;\n  privateKey: PrivateKey;\n}): string {\n  return signatureVrsToRsv(signWithKey(privateKey, messageHash));\n}\n\n/**\n * @ignore\n */\nexport function compressPrivateKey(privateKey: PrivateKey): string {\n  privateKey = privateKeyToHex(privateKey);\n\n  return privateKey.length == PRIVATE_KEY_BYTES_COMPRESSED * 2\n    ? privateKey // leave compressed\n    : `${privateKey}01`; // compress\n}\n\n/**\n * Convert a private key to a single-sig address.\n * @returns A Stacks address string (encoded with c32check)\n * @example\n * ```\n * const address = privateKeyToAddress(\"73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801\");\n * // SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR\n * ```\n */\nexport function privateKeyToAddress(\n  privateKey: PrivateKey,\n  network?: StacksNetworkName | StacksNetwork\n): string {\n  const publicKey = privateKeyToPublic(privateKey);\n  return publicKeyToAddressSingleSig(publicKey, network);\n}\n\n/**\n * Convert a public key to an address.\n * @returns A Stacks address string (encoded with c32check)\n * @example Public key to address\n * ```\n * const address = publicKeyToAddress(\"03ef788b3830c00abe8f64f62dc32fc863bc0b2cafeb073b6c8e1c7657d9c2c3ab\");\n * const address = publicKeyToAddress(\"03ef788b3830c00abe8f64f62dc32fc863bc0b2cafeb073b6c8e1c7657d9c2c3ab\", STACKS_TESTNET);\n * ```\n */\nexport function publicKeyToAddress(\n  publicKey: PublicKey,\n  network?: StacksNetworkName | StacksNetwork\n): string;\nexport function publicKeyToAddress(version: AddressVersion, publicKey: PublicKey): string;\nexport function publicKeyToAddress(\n  ...args: Parameters<typeof publicKeyToAddressSingleSig> | Parameters<typeof _publicKeyToAddress>\n): string {\n  if (typeof args[0] === 'number') return _publicKeyToAddress(...args);\n  return publicKeyToAddressSingleSig(...args);\n}\n\n/** Legacy implementation for backwards compatibility @ignore */\nfunction _publicKeyToAddress(version: AddressVersion, publicKey: PublicKey): string {\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return c32address(version, bytesToHex(hash160(publicKey)));\n}\n\n/** Alias for {@link publicKeyToAddress} */\nexport function publicKeyToAddressSingleSig(\n  publicKey: PublicKey,\n  network?: StacksNetworkName | StacksNetwork\n): string {\n  network = network ? networkFrom(network) : STACKS_MAINNET;\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return c32address(network.addressVersion.singleSig, bytesToHex(hash160(publicKey)));\n}\n\n// todo: add multi-sig address support from [key]s!\n","import { c32address, c32addressDecode } from 'c32check';\nimport { AddressVersion } from '../constants';\nimport { privateKeyToAddress, publicKeyToAddressSingleSig } from '../keys';\nimport { AddressString, ContractIdString } from '../types';\n\nconst C32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\n\nexport type AddressRepr = { hash160: string; contractName?: string } & (\n  | {\n      version: AddressVersion;\n      versionChar: string;\n    }\n  | {\n      version: AddressVersion;\n    }\n  | {\n      versionChar: string;\n    }\n);\n\n/**\n * Parse a C32 Stacks address string to an address object.\n * @param address - The address string to parse.\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.parse('SP000000000000000000002Q6VF78');\n * // { version: 22, versionChar: 'P', hash160: '0000000000000000000000000000000000000000' }\n *\n * const address = Address.parse('ST000000000000000000002AMW42H.pox');\n * // { version: 22, versionChar: 'P', hash160: '0000000000000000000000000000000000000000', contractName: 'pox' }\n * ```\n */\nexport function parse(\n  address:\n    | AddressString\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    | ContractIdString\n): AddressRepr {\n  const [addr, contractName] = address.split('.');\n  const parsed = c32addressDecode(addr);\n  return {\n    version: parsed[0],\n    versionChar: C32[parsed[0]],\n    hash160: parsed[1],\n    contractName: contractName,\n  };\n}\n\n/**\n * Stringify an address to the C32 address format.\n * @param address - The address object to stringify.\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.stringify({ version: 22, hash160: '0000000000000000000000000000000000000000' });\n * console.log(address); // 'SP000000000000000000002Q6VF78'\n *\n * const address = Address.stringify({ versionChar: 'P', hash160: '0000000000000000000000000000000000000000' });\n * console.log(address); // 'SP000000000000000000002Q6VF78'\n * ```\n */\nexport function stringify(address: AddressRepr): string {\n  const version =\n    'version' in address ? address.version : C32.indexOf(address.versionChar.toUpperCase());\n  const addr = c32address(version, address.hash160);\n\n  if (address.contractName) return `${addr}.${address.contractName}`;\n  return addr;\n}\n\n/**\n * Convert a private key to a single-sig C32 Stacks address.\n * @param privateKey - The private key to convert.\n * @returns The address string.\n *\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.fromPrivateKey('73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801');\n * // 'SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR'\n *\n * const address = Address.fromPrivateKey('73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801', 'testnet');\n * // 'ST10J81WVGVB3M4PHQN4Q4G0R8586TBJH94CGRESQ'\n * ```\n */\nexport const fromPrivateKey = privateKeyToAddress;\n\n/**\n * Convert a public key to a single-sig C32 Stacks address.\n * @param publicKey - The public key to convert.\n * @returns The address string.\n *\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.fromPublicKey('0316e35d38b52d4886e40065e4952a49535ce914e02294be58e252d1998f129b19');\n * // 'SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR'\n *\n * const address = Address.fromPublicKey('0316e35d38b52d4886e40065e4952a49535ce914e02294be58e252d1998f129b19', 'testnet');\n * // 'ST10J81WVGVB3M4PHQN4Q4G0R8586TBJH94CGRESQ'\n * ```\n */\nexport const fromPublicKey = publicKeyToAddressSingleSig;\n\n// todo: add `fromPublicKeys` for multi-sig\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityValue } from './clarity';\nimport {\n  FungibleComparator,\n  FungiblePostCondition,\n  NonFungibleComparator,\n  NonFungiblePostCondition,\n  PostCondition,\n  StxPostCondition,\n} from './postcondition-types';\nimport { AddressString, AssetString, ContractIdString } from './types';\nimport { parseContractId, validateStacksAddress } from './utils';\nimport { deserializePostConditionWire } from './wire';\nimport { wireToPostCondition } from './postcondition';\n\n/// `Pc.` Post Condition Builder\n//\n// This is a behavioral helper interface for constructing post conditions.\n//\n// The general pattern is:\n//   PRINCIPAL -> [AMOUNT] -> CODE -> ASSET\n//\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @param {AddressString | ContractIdString} principal The principal to check, which should/should-not be sending assets. A string in the format `<address>` or `<contractAddress>.<contractName>`.\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(10000).ustx();\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6.mycontract').willSendGte(2000).ft();\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function principal(principal: AddressString | ContractIdString) {\n  const [address, name] = principal.split('.');\n\n  // todo: improve validity check (and add helper methods like `isValidContractId`, `isValidAdress`,\n  // token name, asset syntax, etc.) -- also deupe .split checks in codebase\n  if (!address || !validateStacksAddress(address) || (typeof name === 'string' && !name)) {\n    throw new Error(`Invalid contract id: ${principal}`);\n  }\n\n  return new PartialPcWithPrincipal(principal);\n}\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.origin().willSendEq(10000).ustx();\n * Pc.origin().willSendGte(2000).ft();\n * ```\n */\nexport function origin() {\n  return new PartialPcWithPrincipal('origin');\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcWithPrincipal {\n  constructor(private address: string) {}\n\n  // todo: split FT and STX into separate methods? e.g. `willSendSTXEq` and `willSendFtEq`\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Equal` (equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(100).stx();\n   * ```\n   */\n  willSendEq(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'eq');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.LessEqual` (less-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLte(100).stx();\n   * ```\n   */\n  willSendLte(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'lte');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Less` (less-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLt(100).stx();\n   * ```\n   */\n  willSendLt(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'lt');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.GreaterEqual` (greater-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGte(100).stx();\n   * ```\n   */\n  willSendGte(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'gte');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Greater` (greater-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGt(100).stx();\n   * ```\n   */\n  willSendGt(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'gt');\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.Sends` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willSendAsset() {\n    return new PartialPcNftWithCode(this.address, 'sent');\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.DoesNotSend` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willNotSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willNotSendAsset() {\n    return new PartialPcNftWithCode(this.address, 'not-sent');\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcFtWithCode {\n  constructor(\n    private address: string,\n    private amount: IntegerType,\n    private code: FungibleComparator\n  ) {}\n\n  /**\n   * ### STX Post Condition\n   * ⚠ Amount of STX is denoted in uSTX (micro-STX)\n   */\n  ustx(): StxPostCondition {\n    // todo: rename to `uSTX`?\n    return {\n      type: 'stx-postcondition',\n      address: this.address,\n      condition: this.code,\n      amount: intToBigInt(this.amount).toString(),\n    };\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * ⚠ Amount of fungible tokens is denoted in the smallest unit of the token\n   */\n  ft(contractId: ContractIdString, tokenName: string): FungiblePostCondition {\n    // todo: allow taking one arg (`Asset`) as well, overload\n\n    const [address, name] = contractId.split('.');\n    if (!address || !validateStacksAddress(address) || (typeof name === 'string' && !name)) {\n      throw new Error(`Invalid contract id: ${contractId}`);\n    }\n\n    return {\n      type: 'ft-postcondition',\n      address: this.address,\n      condition: this.code,\n      amount: intToBigInt(this.amount).toString(),\n      asset: `${contractId}::${tokenName}`,\n    };\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcNftWithCode {\n  constructor(\n    private address: string,\n    private code: NonFungibleComparator\n  ) {}\n\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param assetName - The name of the NFT asset. Formatted as `<contract-address>.<contract-name>::<token-name>`.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(assetName: AssetString, assetId: ClarityValue): NonFungiblePostCondition;\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param contractId - The contract identifier of the NFT. Formatted as `<contract-address>.<contract-name>`.\n   * @param tokenName - The name of the NFT asset.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(\n    contractId: ContractIdString,\n    tokenName: string,\n    assetId: ClarityValue\n  ): NonFungiblePostCondition;\n  nft(...args: [any, any] | [any, any, any]): NonFungiblePostCondition {\n    const { contractAddress, contractName, tokenName, assetId } = getNftArgs(\n      ...(args as [any, any, any])\n    );\n\n    if (!validateStacksAddress(contractAddress)) {\n      throw new Error(`Invalid contract id: ${contractAddress}`);\n    }\n\n    return {\n      type: 'nft-postcondition',\n      address: this.address,\n      condition: this.code,\n      asset: `${contractAddress}.${contractName}::${tokenName}`,\n      assetId,\n    };\n  }\n}\n\n/** @internal */\nfunction parseNft(nftAssetName: AssetString) {\n  const [principal, tokenName] = nftAssetName.split('::') as [ContractIdString, string];\n  if (!principal || !tokenName)\n    throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\n  const [address, name] = parseContractId(principal);\n  return { contractAddress: address, contractName: name, tokenName };\n}\n\n/**\n * Deserializes a serialized post condition hex string into a post condition object\n * @param hex - Post condition hex string\n * @returns Deserialized post condition\n * @example\n * ```ts\n * import { Pc } from '@stacks/transactions';\n *\n * const hex = '00021600000000000000000000000000000000000000000200000000000003e8'\n * const postCondition = Pc.fromHex(hex);\n * // {\n * //   type: 'stx-postcondition',\n * //   address: 'SP000000000000000000002Q6VF78',\n * //   condition: 'gt',\n * //   amount: '1000'\n * // }\n * ```\n */\nexport function fromHex(hex: string): PostCondition {\n  const wire = deserializePostConditionWire(hex);\n  return wireToPostCondition(wire);\n}\n\n/**\n * Helper method for `PartialPcNftWithCode.nft` to parse the arguments.\n * @internal\n */\nfunction getNftArgs(\n  asset: AssetString,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(\n  contractId: ContractIdString,\n  tokenName: string,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(...args: [any, any] | [any, any, any]): {\n  contractAddress: string;\n  contractName: string;\n  tokenName: string;\n  assetId: ClarityValue;\n} {\n  if (args.length === 2) {\n    const [assetName, assetId] = args;\n    return { ...parseNft(assetName), assetId };\n  }\n\n  // args.length === 3\n  const [contractId, tokenName, assetId] = args;\n  const [address, name] = parseContractId(contractId);\n  return { contractAddress: address, contractName: name, tokenName, assetId };\n}\n","import {\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionMode,\n  PostConditionPrincipalId,\n  PostConditionType,\n} from './constants';\nimport {\n  FungibleComparator,\n  NonFungibleComparator,\n  PostCondition,\n  PostConditionModeName,\n} from './postcondition-types';\nimport { AssetString } from './types';\nimport {\n  AssetWire,\n  PostConditionPrincipalWire,\n  PostConditionWire,\n  StacksWireType,\n  addressToString,\n  parseAssetString,\n  parsePrincipalString,\n  serializePostConditionWire,\n} from './wire';\n\n/** @internal */\nenum PostConditionCodeWireType {\n  eq = FungibleConditionCode.Equal,\n  gt = FungibleConditionCode.Greater,\n  lt = FungibleConditionCode.Less,\n  gte = FungibleConditionCode.GreaterEqual,\n  lte = FungibleConditionCode.LessEqual,\n\n  sent = NonFungibleConditionCode.Sends,\n  'not-sent' = NonFungibleConditionCode.DoesNotSend,\n}\n\nexport function postConditionToWire(postcondition: PostCondition): PostConditionWire {\n  switch (postcondition.type) {\n    case 'stx-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition) as FungibleConditionCode,\n        amount: BigInt(postcondition.amount),\n      };\n    case 'ft-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition) as FungibleConditionCode,\n        amount: BigInt(postcondition.amount),\n        asset: parseAssetString(postcondition.asset),\n      };\n    case 'nft-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition),\n        asset: parseAssetString(postcondition.asset),\n        assetName: postcondition.assetId,\n      };\n    default:\n      throw new Error('Invalid post condition type');\n  }\n}\n\nexport function wireToPostCondition(wire: PostConditionWire): PostCondition {\n  switch (wire.conditionType) {\n    case PostConditionType.STX:\n      return {\n        type: 'stx-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        amount: wire.amount.toString(),\n      };\n    case PostConditionType.Fungible:\n      return {\n        type: 'ft-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        amount: wire.amount.toString(),\n        asset: assetWireToString(wire.asset),\n      };\n    case PostConditionType.NonFungible:\n      return {\n        type: 'nft-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        asset: assetWireToString(wire.asset),\n        assetId: wire.assetName,\n      };\n    default: {\n      const _exhaustiveCheck: never = wire;\n      throw new Error(`Invalid post condition type: ${_exhaustiveCheck}`);\n    }\n  }\n}\n\n/** @internal */\nexport function conditionTypeToByte<T extends FungibleComparator | NonFungibleComparator>(\n  condition: T\n): T extends FungibleComparator ? FungibleConditionCode : NonFungibleConditionCode {\n  return (\n    PostConditionCodeWireType as unknown as Record<\n      T,\n      T extends FungibleComparator ? FungibleConditionCode : NonFungibleConditionCode\n    >\n  )[condition];\n}\n\n/** @internal */\nexport function conditionByteToType<T extends FungibleConditionCode | NonFungibleConditionCode>(\n  wireType: T\n): T extends FungibleConditionCode ? FungibleComparator : NonFungibleComparator {\n  return (\n    PostConditionCodeWireType as unknown as Record<\n      // numerical enums are bidirectional in TypeScript\n      T,\n      T extends FungibleConditionCode ? FungibleComparator : NonFungibleComparator\n    >\n  )[wireType];\n}\n\n/**\n * Convert a post condition to a hex string\n * @param postcondition - The post condition object to convert\n * @returns The hex string representation of the post condition\n *\n * @example\n * ```ts\n * import { postConditionToHex } from '@stacks/transactions';\n *\n * const hex = postConditionToHex({\n *   type: 'stx-postcondition',\n *   address: 'ST00000000000000000002Q6VF78',\n *   condition: 'eq',\n *   amount: '1000000000000000000',\n * });\n * ```\n * @see {@link StxPostCondition}, {@link FungiblePostCondition}, {@link NonFungiblePostCondition}\n */\nexport function postConditionToHex(postcondition: PostCondition): string {\n  const wire = postConditionToWire(postcondition);\n  return serializePostConditionWire(wire);\n}\n\n/** @internal */\nexport function postConditionModeFrom(\n  mode: PostConditionModeName | PostConditionMode\n): PostConditionMode {\n  if (typeof mode === 'number') return mode;\n  if (mode === 'allow') return PostConditionMode.Allow;\n  if (mode === 'deny') return PostConditionMode.Deny;\n  throw new Error(`Invalid post condition mode: ${mode}`);\n}\n\n/** @internal */\nfunction assetWireToString(asset: AssetWire): AssetString {\n  const address = addressToString(asset.address);\n  const contractId = `${address}.${asset.contractName.content}` as const;\n  return `${contractId}::${asset.assetName.content}`;\n}\n\n/** @internal */\nfunction principalWireToString(principal: PostConditionPrincipalWire): string {\n  switch (principal.prefix) {\n    case PostConditionPrincipalId.Origin:\n      return 'origin';\n    case PostConditionPrincipalId.Standard:\n      return addressToString(principal.address);\n    case PostConditionPrincipalId.Contract:\n      const address = addressToString(principal.address);\n      return `${address}.${principal.contractName.content}`;\n    default:\n      const _exhaustiveCheck: never = principal;\n      throw new Error(`Invalid principal type: ${_exhaustiveCheck}`);\n  }\n}\n","import { PrivateKey, PublicKey } from '@stacks/common';\nimport {\n  SpendingConditionOpts,\n  isNonSequentialMultiSig,\n  isSequentialMultiSig,\n  isSingleSig,\n  nextVerification,\n} from './authorization';\nimport { AddressHashMode, AuthType, PubKeyEncoding } from './constants';\nimport { SigningError } from './errors';\nimport { StacksTransactionWire } from './transaction';\nimport { cloneDeep } from './utils';\nimport { PublicKeyWire, StacksWireType } from './wire';\nimport { createStacksPublicKey } from './keys';\n\n// todo: get rid of signer and combine with transaction class? could reduce code and complexity by calculating sighash newly each sign and append.\nexport class TransactionSigner {\n  transaction: StacksTransactionWire;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransactionWire) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n\n    // If multi-sig spending condition exists, iterate over\n    // auth fields and reconstruct sigHash\n    const spendingCondition = transaction.auth.spendingCondition;\n    if (spendingCondition && !isSingleSig(spendingCondition)) {\n      if (\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksWireType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('SpendingCondition has more signatures than are expected');\n      }\n\n      spendingCondition.fields.forEach(field => {\n        if (field.contents.type !== StacksWireType.MessageSignature) return;\n\n        const signature = field.contents;\n        const nextVerify = nextVerification(\n          this.sigHash,\n          transaction.auth.authType,\n          spendingCondition.fee,\n          spendingCondition.nonce,\n          PubKeyEncoding.Compressed, // always compressed for multisig\n          signature.data\n        );\n\n        if (!isNonSequentialMultiSig(spendingCondition.hashMode)) {\n          this.sigHash = nextVerify.nextSigHash;\n        }\n      });\n    }\n  }\n\n  static createSponsorSigner(\n    transaction: StacksTransactionWire,\n    spendingCondition: SpendingConditionOpts\n  ) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransactionWire = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: PrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    const spendingCondition = this.transaction.auth.spendingCondition;\n    if (\n      spendingCondition.hashMode === AddressHashMode.P2SH ||\n      spendingCondition.hashMode === AddressHashMode.P2WSH\n    ) {\n      // only check oversign on legacy multisig modes\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksWireType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n\n    if (\n      isSingleSig(this.transaction.auth.spendingCondition) ||\n      isSequentialMultiSig(this.transaction.auth.spendingCondition.hashMode)\n    ) {\n      this.sigHash = nextSighash;\n    }\n  }\n\n  appendOrigin(publicKey: PublicKey): void;\n  appendOrigin(publicKey: PublicKeyWire): void;\n  appendOrigin(publicKey: PublicKey | PublicKeyWire): void {\n    const wire =\n      typeof publicKey === 'object' && 'type' in publicKey\n        ? publicKey\n        : createStacksPublicKey(publicKey);\n\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(wire);\n  }\n\n  signSponsor(privateKey: PrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.authType !== AuthType.Sponsored) {\n      throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransactionWire {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransactionWire) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n","import { sha256 } from '@noble/hashes/sha256';\nimport { PrivateKey, bytesToHex, concatBytes, hexToBytes } from '@stacks/common';\nimport { ClarityType, ClarityValue, serializeCVBytes } from './clarity';\nimport { signMessageHashRsv } from './keys';\n\n// Refer to SIP018 https://github.com/stacksgov/sips/\n// > asciiToBytes('SIP018')\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\n\nexport function hashStructuredData(structuredData: ClarityValue): string {\n  return bytesToHex(sha256(serializeCVBytes(structuredData)));\n}\n\nexport function hashStructuredDataBytes(structuredData: ClarityValue): Uint8Array {\n  return sha256(serializeCVBytes(structuredData));\n}\n\nconst hash256BytesLength = 32;\n\nfunction isDomain(value: ClarityValue): boolean {\n  if (value.type !== ClarityType.Tuple) return false;\n  // Check that the tuple has at least 'name', 'version' and 'chain-id'\n  if (!['name', 'version', 'chain-id'].every(key => key in value.value)) return false;\n  // Check each key is of the right type\n  if (!['name', 'version'].every(key => value.value[key].type === ClarityType.StringASCII))\n    return false;\n\n  if (value.value['chain-id'].type !== ClarityType.UInt) return false;\n  return true;\n}\n\nexport function encodeStructuredData(opts: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): string {\n  const bytes = encodeStructuredDataBytes(opts);\n  return bytesToHex(bytes);\n}\n\nexport function encodeStructuredDataBytes({\n  message,\n  domain,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): Uint8Array {\n  const structuredDataHash: Uint8Array = hashStructuredDataBytes(message);\n  if (!isDomain(domain)) {\n    throw new Error(\n      \"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\"\n    );\n  }\n  const domainHash: Uint8Array = hashStructuredDataBytes(domain);\n\n  return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\n\nexport function decodeStructuredDataSignature(signature: string | Uint8Array): {\n  domainHash: string;\n  messageHash: string;\n} {\n  const bytes = decodeStructuredDataSignatureBytes(signature);\n  return {\n    domainHash: bytesToHex(bytes.domainHash),\n    messageHash: bytesToHex(bytes.messageHash),\n  };\n}\n\nexport function decodeStructuredDataSignatureBytes(signature: string | Uint8Array): {\n  domainHash: Uint8Array;\n  messageHash: Uint8Array;\n} {\n  const encodedMessageBytes: Uint8Array =\n    typeof signature === 'string' ? hexToBytes(signature) : signature;\n  const domainHash = encodedMessageBytes.slice(\n    STRUCTURED_DATA_PREFIX.length,\n    STRUCTURED_DATA_PREFIX.length + hash256BytesLength\n  );\n  const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n  return {\n    domainHash,\n    messageHash,\n  };\n}\n\n/**\n * Signs a structured message (ClarityValue) and a domain (ClarityValue) using a private key.\n * The resulting signature along with the original message can be verified using {@link verifyMessageSignature}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signStructuredData({\n  message,\n  domain,\n  privateKey,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n  privateKey: PrivateKey;\n}): string {\n  const structuredDataHash = bytesToHex(sha256(encodeStructuredDataBytes({ message, domain })));\n\n  return signMessageHashRsv({\n    messageHash: structuredDataHash,\n    privateKey,\n  });\n}\n","import {\n  Hex,\n  IntegerType,\n  PrivateKey,\n  PublicKey,\n  bytesToHex,\n  concatArray,\n  intToBigInt,\n  isInstance,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  ChainId,\n  NetworkParam,\n  STACKS_MAINNET,\n  STACKS_TESTNET,\n  TransactionVersion,\n  networkFrom,\n  whenTransactionVersion,\n} from '@stacks/network';\nimport { serializePayloadBytes } from '.';\nimport { BytesReader } from './BytesReader';\nimport {\n  Authorization,\n  MultiSigSpendingCondition,\n  SpendingConditionOpts,\n  deserializeAuthorization,\n  intoInitialSighashAuth,\n  isSingleSig,\n  nextSignature,\n  serializeAuthorizationBytes,\n  setFee,\n  setNonce,\n  setSponsor,\n  setSponsorNonce,\n  verifyOrigin,\n} from './authorization';\nimport {\n  AddressHashMode,\n  AnchorMode,\n  AuthType,\n  PostConditionMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n} from './constants';\nimport { SerializationError, SigningError } from './errors';\nimport { createStacksPublicKey, privateKeyIsCompressed, publicKeyIsCompressed } from './keys';\nimport { cloneDeep, txidFromData } from './utils';\nimport {\n  LengthPrefixedList,\n  PayloadInput,\n  PayloadWire,\n  PostConditionWire,\n  PublicKeyWire,\n  StacksWireType,\n  createLPList,\n  createMessageSignature,\n  createTransactionAuthField,\n  deserializeLPList,\n  deserializePayload,\n  serializeLPListBytes,\n} from './wire';\n\nexport class StacksTransactionWire {\n  transactionVersion: TransactionVersion;\n  chainId: ChainId;\n  auth: Authorization;\n  payload: PayloadWire;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList<PostConditionWire>;\n\n  /** @deprecated Not used, starting with Stacks 2.5. Still needed for serialization. */\n  anchorMode: AnchorMode;\n\n  constructor({\n    auth,\n    payload,\n    postConditions = createLPList([]),\n    postConditionMode = PostConditionMode.Deny,\n    transactionVersion,\n    chainId,\n    /** The network is only used if `transactionVersion` or `chainId` are not provided */\n    network = 'mainnet',\n  }: {\n    payload: PayloadInput;\n    auth: Authorization;\n    postConditions?: LengthPrefixedList<PostConditionWire>;\n    postConditionMode?: PostConditionMode;\n    transactionVersion?: TransactionVersion;\n    chainId?: ChainId;\n  } & NetworkParam) {\n    network = networkFrom(network);\n\n    this.transactionVersion = transactionVersion ?? network.transactionVersion;\n    this.chainId = chainId ?? network.chainId;\n    this.auth = auth;\n\n    if ('amount' in payload) {\n      this.payload = {\n        ...payload,\n        amount: intToBigInt(payload.amount),\n      };\n    } else {\n      this.payload = payload;\n    }\n\n    this.postConditionMode = postConditionMode;\n    this.postConditions = postConditions;\n\n    this.anchorMode = AnchorMode.Any;\n  }\n\n  /** @deprecated Does NOT mutate transaction, but rather returns the hash of the transaction with a cleared initial authorization */\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  /** @deprecated Alias of `.signBegin()` */\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyOrigin(): string {\n    return verifyOrigin(this.auth, this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: PrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: PrivateKey): string {\n    if (this.auth.authType === AuthType.Sponsored) {\n      return this.signAndAppend(\n        this.auth.sponsorSpendingCondition,\n        sigHash,\n        AuthType.Sponsored,\n        privateKey\n      );\n    } else {\n      throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n    }\n  }\n\n  /**\n   * Append a public key to the spending-condition of the transaction\n   *\n   * @param publicKey - the public key to append\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * transaction.appendPubkey('034f355bdcb7cc0af728..24c0e585c5e89ac788521e0');\n   * ```\n   */\n  appendPubkey(publicKey: PublicKey): void;\n  appendPubkey(publicKey: PublicKeyWire): void;\n  appendPubkey(publicKey: PublicKey | PublicKeyWire): void {\n    const wire =\n      typeof publicKey === 'object' && 'type' in publicKey\n        ? publicKey\n        : createStacksPublicKey(publicKey);\n\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = publicKeyIsCompressed(wire.data);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          wire\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  // todo: this could be static?\n  /** **Warning**: method mutates the `condition` param */\n  signAndAppend(\n    /** `condition` is mutated by this method */\n    condition: SpendingConditionOpts,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: PrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = createMessageSignature(nextSig);\n    } else {\n      const compressed = privateKeyIsCompressed(privateKey);\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          createMessageSignature(nextSig)\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serializeBytes();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingConditionOpts) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param fee - the fee amount in microstacks\n   */\n  setFee(amount: IntegerType) {\n    this.auth = setFee(this.auth, amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param nonce - the nonce value\n   */\n  setNonce(nonce: IntegerType) {\n    this.auth = setNonce(this.auth, nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: IntegerType) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsorNonce(this.auth, nonce);\n  }\n\n  /**\n   * Serialize a transaction to a hex string (byte representation)\n   *\n   * @returns A hex string of the serialized transaction\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * const hex = transaction.serialize();\n   * ```\n   */\n  serialize(): Hex {\n    return bytesToHex(this.serializeBytes());\n  }\n\n  /**\n   * Serialize a transaction to bytes\n   *\n   * @returns A Uint8Array of the serialized transaction\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * const bytes = transaction.serializeBytes();\n   * ```\n   */\n  serializeBytes(): Uint8Array {\n    if (this.transactionVersion === undefined) {\n      throw new SerializationError('\"transactionVersion\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bytesArray = [];\n\n    bytesArray.push(this.transactionVersion);\n    const chainIdBytes = new Uint8Array(4);\n    writeUInt32BE(chainIdBytes, this.chainId, 0);\n    bytesArray.push(chainIdBytes);\n    bytesArray.push(serializeAuthorizationBytes(this.auth));\n    bytesArray.push(this.anchorMode);\n    bytesArray.push(this.postConditionMode);\n    bytesArray.push(serializeLPListBytes(this.postConditions));\n    bytesArray.push(serializePayloadBytes(this.payload));\n\n    return concatArray(bytesArray);\n  }\n}\n\n/**\n * @param tx hex string or bytes of serialized transaction\n */\nexport function deserializeTransaction(tx: string | Uint8Array | BytesReader) {\n  const bytesReader = isInstance(tx, BytesReader) ? tx : new BytesReader(tx);\n  const transactionVersion = bytesReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bytesReader.readUInt32BE();\n  const auth = deserializeAuthorization(bytesReader);\n  const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bytesReader, StacksWireType.PostCondition);\n  const payload = deserializePayload(bytesReader);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion,\n    chainId,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n  });\n  transaction.anchorMode = anchorMode; // not used anymore, but part of the transaction wire format\n  return transaction;\n}\n\n/** @ignore */\nexport function deriveNetworkFromTx(transaction: StacksTransactionWire) {\n  // todo: maybe add as renamed public method\n  return whenTransactionVersion(transaction.transactionVersion)({\n    [TransactionVersion.Mainnet]: STACKS_MAINNET,\n    [TransactionVersion.Testnet]: STACKS_TESTNET,\n  });\n}\n\n/**\n * Estimates transaction byte length\n * Context:\n * 1) Multi-sig transaction byte length increases by adding signatures\n *    which causes the incorrect fee estimation because the fee value is set while creating unsigned transaction\n * 2) Single-sig transaction byte length remain same due to empty message signature which allocates the space for signature\n * @param {transaction} - StacksTransaction object to be estimated\n * @return {number} Estimated transaction byte length\n */\nexport function estimateTransactionByteLength(transaction: StacksTransactionWire): number {\n  const hashMode = transaction.auth.spendingCondition.hashMode;\n  // List of Multi-sig transaction hash modes\n  const multiSigHashModes = [AddressHashMode.P2SH, AddressHashMode.P2WSH];\n\n  // Check if its a Multi-sig transaction\n  if (multiSigHashModes.includes(hashMode)) {\n    const multiSigSpendingCondition: MultiSigSpendingCondition = transaction.auth\n      .spendingCondition as MultiSigSpendingCondition;\n\n    // Find number of existing signatures if the transaction is signed or partially signed\n    const existingSignatures = multiSigSpendingCondition.fields.filter(\n      field => field.contents.type === StacksWireType.MessageSignature\n    ).length; // existingSignatures will be 0 if its a unsigned transaction\n\n    // Estimate total signature bytes size required for this multi-sig transaction\n    // Formula: totalSignatureLength = (signaturesRequired - existingSignatures) * (SIG_LEN_BYTES + 1 byte for type of signature)\n    const totalSignatureLength =\n      (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n      (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n\n    return transaction.serializeBytes().byteLength + totalSignatureLength;\n  } else {\n    // Single-sig transaction\n    // Signature space already allocated by empty message signature\n    return transaction.serializeBytes().byteLength;\n  }\n}\n\n/**\n * Alias for `transaction.serialize()`\n *\n * Serializes a transaction to a hex string.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, serializeTransaction } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const hex = serializeTransaction(transaction);\n * ```\n */\nexport function serializeTransaction(transaction: StacksTransactionWire): Hex {\n  return transaction.serialize();\n}\n\n/**\n * Alias for `transaction.serializeBytes()`\n *\n * Serializes a transaction to bytes.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, serializeTransactionBytes } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const bytes = serializeTransactionBytes(transaction);\n * ```\n */\nexport function serializeTransactionBytes(transaction: StacksTransactionWire): Uint8Array {\n  return transaction.serializeBytes();\n}\n\n/**\n * Alias for `transaction.serialize()`\n *\n * Serializes a transaction to a hex string.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, transactionToHex } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const hex = transactionToHex(transaction);\n * ```\n */\nexport function transactionToHex(transaction: StacksTransactionWire): string {\n  return transaction.serialize();\n}\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity';\nimport { ContractIdString } from './types';\n\n// Export verify as utility method for signature verification\nexport { verify as verifySignature } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates random bytes of given length\n * @param {number} bytesLength an optional bytes length, default is 32 bytes\n */\nexport const randomBytes = (bytesLength?: number): Uint8Array => utils.randomBytes(bytesLength);\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 ? `0${hexString}` : hexString;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? utf8ToBytes(string).length > maxLengthBytes : false;\n\n/** @internal @deprecated */\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\n// todo: remove this function and instead delete param without clone (if possible)?\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport const hash160 = (input: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(input));\n};\n\n/** @deprecated renamed to {@link txidFromBytes} */\nexport const txidFromData = (data: Uint8Array): string => {\n  return bytesToHex(sha512_256(data));\n};\n\n/**\n * Computes the transaction ID of the bytes from a serialized transaction (or any other bytes using the same hash function).\n */\nexport const txidFromBytes = txidFromData;\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\n/** @internal */\nexport const hashP2PKH = (input: Uint8Array): string => {\n  return bytesToHex(hash160(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address over p2sh (p2h-p2wpkh)\n/** @internal */\nexport const hashP2WPKH = (input: Uint8Array): string => {\n  const keyHash = hash160(input);\n  const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\n/** @internal */\nexport const hashP2SH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bytesArray = [];\n  // OP_n\n  bytesArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bytesArray.push(pubKey.length);\n    bytesArray.push(pubKey);\n  });\n  // OP_m\n  bytesArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bytesArray.push(174);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multisig address over p2sh (p2sh-p2wsh)\n/** @internal */\nexport const hashP2WSH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2WSH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const scriptArray = [];\n  // OP_n\n  scriptArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    scriptArray.push(pubKey.length);\n    scriptArray.push(pubKey);\n  });\n  // OP_m\n  scriptArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  scriptArray.push(174);\n\n  const script = concatArray(scriptArray);\n  const digest = sha256(script);\n\n  const bytesArray = [];\n  bytesArray.push(0);\n  bytesArray.push(digest.length);\n  bytesArray.push(digest);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${serialized}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  return deserializeCV(hex);\n}\n\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) return hexToCV(response.result);\n  throw new Error(response.cause);\n};\n\nexport const validateStacksAddress = (address: string): boolean => {\n  try {\n    c32addressDecode(address);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/** @ignore */\nexport function parseContractId(contractId: ContractIdString) {\n  const [address, name] = contractId.split('.');\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\n  return [address, name];\n}\n","import { IntegerType, hexToBytes, intToBigInt } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport { ClarityType, ClarityValue, OptionalCV, PrincipalCV, principalCV } from '../clarity';\nimport {\n  AddressVersion,\n  COINBASE_BYTES_LENGTH,\n  ClarityVersion,\n  MAX_STRING_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  PayloadType,\n  PostConditionPrincipalId,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  TenureChangeCause,\n  VRF_PROOF_BYTES_LENGTH,\n} from '../constants';\nimport { exceedsMaxLengthBytes } from '../utils';\nimport {\n  AddressWire,\n  AssetWire,\n  CoinbasePayloadToAltRecipient,\n  CoinbasePayloadWire,\n  ContractCallPayload,\n  ContractPrincipalWire,\n  LengthPrefixedList,\n  LengthPrefixedStringWire,\n  MemoStringWire,\n  MessageSignatureWire,\n  NakamotoCoinbasePayloadWire,\n  PoisonPayloadWire,\n  SmartContractPayloadWire,\n  StacksWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TenureChangePayloadWire,\n  TokenTransferPayloadWire,\n  TransactionAuthFieldContentsWire,\n  TransactionAuthFieldWire,\n  VersionedSmartContractPayloadWire,\n} from './types';\n\nexport function createEmptyAddress(): AddressWire {\n  return {\n    type: StacksWireType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function createMemoString(content: string): MemoStringWire {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksWireType.MemoString, content };\n}\n\nexport function createLPList<T extends StacksWire>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList<T> {\n  return {\n    type: StacksWireType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function createMessageSignature(signature: string): MessageSignatureWire {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksWireType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: IntegerType,\n  memo?: string | MemoStringWire\n): TokenTransferPayloadWire {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount: intToBigInt(amount),\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | AddressWire,\n  contractName: string | LengthPrefixedStringWire,\n  functionName: string | LengthPrefixedStringWire,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress:\n      typeof contractAddress === 'string' ? createAddress(contractAddress) : contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport function codeBodyString(content: string): LengthPrefixedStringWire {\n  return createLPString(content, 4, 100_000);\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedStringWire,\n  codeBody: string | LengthPrefixedStringWire,\n  clarityVersion?: ClarityVersion\n): SmartContractPayloadWire | VersionedSmartContractPayloadWire {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  if (typeof clarityVersion === 'number') {\n    return {\n      type: StacksWireType.Payload,\n      payloadType: PayloadType.VersionedSmartContract,\n      clarityVersion,\n      contractName,\n      codeBody,\n    };\n  }\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport function createPoisonPayload(): PoisonPayloadWire {\n  return { type: StacksWireType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport function createCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  altRecipient?: PrincipalCV\n): CoinbasePayloadWire | CoinbasePayloadToAltRecipient {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (altRecipient != undefined) {\n    return {\n      type: StacksWireType.Payload,\n      payloadType: PayloadType.CoinbaseToAltRecipient,\n      coinbaseBytes,\n      recipient: altRecipient,\n    };\n  }\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.Coinbase,\n    coinbaseBytes,\n  };\n}\n\nexport function createNakamotoCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  recipient: OptionalCV<PrincipalCV>,\n  vrfProof: Uint8Array\n): NakamotoCoinbasePayloadWire {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (vrfProof.byteLength != VRF_PROOF_BYTES_LENGTH) {\n    throw Error(`VRF proof buffer size must be ${VRF_PROOF_BYTES_LENGTH} bytes`);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.NakamotoCoinbase,\n    coinbaseBytes,\n    recipient: recipient.type === ClarityType.OptionalSome ? recipient.value : undefined,\n    vrfProof,\n  };\n}\n\nexport function createTenureChangePayload(\n  tenureHash: string,\n  previousTenureHash: string,\n  burnViewHash: string,\n  previousTenureEnd: string,\n  previousTenureBlocks: number,\n  cause: TenureChangeCause,\n  publicKeyHash: string\n): TenureChangePayloadWire {\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.TenureChange,\n    tenureHash,\n    previousTenureHash,\n    burnViewHash,\n    previousTenureEnd,\n    previousTenureBlocks,\n    cause,\n    publicKeyHash,\n  };\n}\n\nexport function createLPString(content: string): LengthPrefixedStringWire;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number\n): LengthPrefixedStringWire;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedStringWire;\n/** @ignore */\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedStringWire {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n  }\n  return {\n    type: StacksWireType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\n/** @ignore */\nexport function createAsset(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetWire {\n  return {\n    type: StacksWireType.Asset,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\n/** @ignore */\nexport function createAddress(c32AddressString: string): AddressWire {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksWireType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\n/** @ignore */\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipalWire {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksWireType.Principal,\n    prefix: PostConditionPrincipalId.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\n/** @ignore */\nexport function createStandardPrincipal(addressString: string): StandardPrincipalWire {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksWireType.Principal,\n    prefix: PostConditionPrincipalId.Standard,\n    address: addr,\n  };\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContentsWire\n): TransactionAuthFieldWire {\n  return {\n    pubKeyEncoding,\n    type: StacksWireType.TransactionAuthField,\n    contents,\n  };\n}\n","import { c32address } from 'c32check';\nimport { AddressHashMode, AddressVersion, PayloadType } from '../constants';\nimport { publicKeyIsCompressed } from '../keys';\nimport { AssetString } from '../types';\nimport { hashP2PKH, hashP2SH, hashP2WPKH, hashP2WSH } from '../utils';\nimport { createAsset, createContractPrincipal, createStandardPrincipal } from './create';\nimport { serializePublicKeyBytes } from './serialization';\nimport {\n  AddressWire,\n  AssetWire,\n  CoinbasePayloadWire,\n  ContractCallPayload,\n  ContractPrincipalWire,\n  PayloadWire,\n  PoisonPayloadWire,\n  PublicKeyWire,\n  SmartContractPayloadWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TokenTransferPayloadWire,\n} from './types';\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  // todo: `next` refactor to `requiredSignatures`, and opts object with network?\n  publicKeys: PublicKeyWire[]\n): AddressWire {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (\n    hashMode === AddressHashMode.P2WPKH ||\n    hashMode === AddressHashMode.P2WSH ||\n    hashMode === AddressHashMode.P2WSHNonSequential\n  ) {\n    if (!publicKeys.map(p => p.data).every(publicKeyIsCompressed)) {\n      throw Error('Public keys must be compressed for segwit');\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.P2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.P2WPKH:\n      return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n    case AddressHashMode.P2SH:\n    case AddressHashMode.P2SHNonSequential:\n      return addressFromVersionHash(\n        version,\n        hashP2SH(numSigs, publicKeys.map(serializePublicKeyBytes))\n      );\n    case AddressHashMode.P2WSH:\n    case AddressHashMode.P2WSHNonSequential:\n      return addressFromVersionHash(\n        version,\n        hashP2WSH(numSigs, publicKeys.map(serializePublicKeyBytes))\n      );\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): AddressWire {\n  return { type: StacksWireType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: AddressWire): string {\n  return c32address(address.version, address.hash160);\n}\n\nexport function isTokenTransferPayload(p: PayloadWire): p is TokenTransferPayloadWire {\n  return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p: PayloadWire): p is ContractCallPayload {\n  return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p: PayloadWire): p is SmartContractPayloadWire {\n  return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p: PayloadWire): p is PoisonPayloadWire {\n  return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p: PayloadWire): p is CoinbasePayloadWire {\n  return p.payloadType === PayloadType.Coinbase;\n}\n\n/** @ignore */\nexport function parseAssetString(id: AssetString): AssetWire {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const asset = createAsset(assetAddress, assetContractName, assetTokenName);\n  return asset;\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n * @ignore\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipalWire | ContractPrincipalWire {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n","import {\n  bytesToHex,\n  bytesToUtf8,\n  concatArray,\n  hexToBytes,\n  hexToInt,\n  intToBigInt,\n  intToBytes,\n  intToHex,\n  isInstance,\n  utf8ToBytes,\n  writeUInt32BE,\n  writeUInt8,\n} from '@stacks/common';\nimport { BytesReader } from '../BytesReader';\nimport {\n  ClarityValue,\n  OptionalCV,\n  PrincipalCV,\n  deserializeCV,\n  noneCV,\n  serializeCVBytes,\n  someCV,\n} from '../clarity';\nimport {\n  AuthFieldType,\n  COINBASE_BYTES_LENGTH,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  ClarityVersion,\n  FungibleConditionCode,\n  STRING_MAX_LENGTH,\n  MEMO_MAX_LENGTH_BYTES,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionPrincipalId,\n  PostConditionType,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  TenureChangeCause,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  VRF_PROOF_BYTES_LENGTH,\n} from '../constants';\nimport { DeserializationError, SerializationError } from '../errors';\nimport { compressPublicKey, createStacksPublicKey, uncompressPublicKey } from '../keys';\nimport { rightPadHexToLength } from '../utils';\nimport {\n  createCoinbasePayload,\n  createContractCallPayload,\n  createLPList,\n  createLPString,\n  createMessageSignature,\n  createNakamotoCoinbasePayload,\n  createPoisonPayload,\n  createSmartContractPayload,\n  createTenureChangePayload,\n  createTokenTransferPayload,\n  createTransactionAuthField,\n} from './create';\nimport {\n  AddressWire,\n  AssetWire,\n  ContractPrincipalWire,\n  LengthPrefixedList,\n  LengthPrefixedStringWire,\n  MemoStringWire,\n  MessageSignatureWire,\n  OriginPrincipalWire,\n  PayloadInput,\n  PayloadWire,\n  PostConditionPrincipalWire,\n  PostConditionWire,\n  PublicKeyWire,\n  StacksWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TransactionAuthFieldWire,\n} from './types';\n\nexport function serializeStacksWire(wire: StacksWire): string {\n  return bytesToHex(serializeStacksWireBytes(wire));\n}\nexport function serializeStacksWireBytes(wire: StacksWire): Uint8Array {\n  switch (wire.type) {\n    case StacksWireType.Address:\n      return serializeAddressBytes(wire);\n    case StacksWireType.Principal:\n      return serializePrincipalBytes(wire);\n    case StacksWireType.LengthPrefixedString:\n      return serializeLPStringBytes(wire);\n    case StacksWireType.MemoString:\n      return serializeMemoStringBytes(wire);\n    case StacksWireType.Asset:\n      return serializeAssetBytes(wire);\n    case StacksWireType.PostCondition:\n      return serializePostConditionWireBytes(wire);\n    case StacksWireType.PublicKey:\n      return serializePublicKeyBytes(wire);\n    case StacksWireType.LengthPrefixedList:\n      return serializeLPListBytes(wire);\n    case StacksWireType.Payload:\n      return serializePayloadBytes(wire);\n    case StacksWireType.TransactionAuthField:\n      return serializeTransactionAuthFieldBytes(wire);\n    case StacksWireType.MessageSignature:\n      return serializeMessageSignatureBytes(wire);\n  }\n}\n\nexport function deserializeStacksWire(\n  bytesReader: string | Uint8Array | BytesReader,\n  type: StacksWireType,\n  listType?: StacksWireType\n): StacksWire {\n  switch (type) {\n    case StacksWireType.Address:\n      return deserializeAddress(bytesReader);\n    case StacksWireType.Principal:\n      return deserializePrincipal(bytesReader);\n    case StacksWireType.LengthPrefixedString:\n      return deserializeLPString(bytesReader);\n    case StacksWireType.MemoString:\n      return deserializeMemoString(bytesReader);\n    case StacksWireType.Asset:\n      return deserializeAsset(bytesReader);\n    case StacksWireType.PostCondition:\n      return deserializePostConditionWire(bytesReader);\n    case StacksWireType.PublicKey:\n      return deserializePublicKey(bytesReader);\n    case StacksWireType.Payload:\n      return deserializePayload(bytesReader);\n    case StacksWireType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No list type specified');\n      }\n      return deserializeLPList(bytesReader, listType);\n    case StacksWireType.MessageSignature:\n      return deserializeMessageSignature(bytesReader);\n    default:\n      throw new Error('Could not recognize StacksWireType');\n  }\n}\n\nexport function serializeAddress(address: AddressWire): string {\n  return bytesToHex(serializeAddressBytes(address));\n}\nexport function serializeAddressBytes(address: AddressWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n  bytesArray.push(hexToBytes(address.hash160));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAddress(serialized: string | Uint8Array | BytesReader): AddressWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n  const data = bytesToHex(bytesReader.readBytes(20));\n\n  return { type: StacksWireType.Address, version, hash160: data };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipalWire): string {\n  return bytesToHex(serializePrincipalBytes(principal));\n}\nexport function serializePrincipalBytes(principal: PostConditionPrincipalWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(principal.prefix);\n  if (\n    principal.prefix === PostConditionPrincipalId.Standard ||\n    principal.prefix === PostConditionPrincipalId.Contract\n  ) {\n    bytesArray.push(serializeAddressBytes(principal.address));\n  }\n  if (principal.prefix === PostConditionPrincipalId.Contract) {\n    bytesArray.push(serializeLPStringBytes(principal.contractName));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializePrincipal(\n  serialized: string | Uint8Array | BytesReader\n): PostConditionPrincipalWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalId, n => {\n    throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n  });\n  if (prefix === PostConditionPrincipalId.Origin) {\n    return { type: StacksWireType.Principal, prefix } as OriginPrincipalWire;\n  }\n  const address = deserializeAddress(bytesReader);\n  if (prefix === PostConditionPrincipalId.Standard) {\n    return { type: StacksWireType.Principal, prefix, address } as StandardPrincipalWire;\n  }\n  const contractName = deserializeLPString(bytesReader);\n  return {\n    type: StacksWireType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipalWire;\n}\n\nexport function serializeLPString(lps: LengthPrefixedStringWire): string {\n  return bytesToHex(serializeLPStringBytes(lps));\n}\nexport function serializeLPStringBytes(lps: LengthPrefixedStringWire): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(lps.content);\n  const length = contentBytes.byteLength;\n  bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n  bytesArray.push(contentBytes);\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPString(\n  serialized: string | Uint8Array | BytesReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedStringWire {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n  const content = bytesToUtf8(bytesReader.readBytes(length));\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function serializeMemoString(memoString: MemoStringWire): string {\n  return bytesToHex(serializeMemoStringBytes(memoString));\n}\nexport function serializeMemoStringBytes(memoString: MemoStringWire): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(memoString.content);\n  const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n  bytesArray.push(hexToBytes(paddedContent));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeMemoString(\n  serialized: string | Uint8Array | BytesReader\n): MemoStringWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  let content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n  content = content.replace(/\\u0000*$/, ''); // remove all trailing unicode null characters\n  return { type: StacksWireType.MemoString, content };\n}\n\nexport function serializeAsset(info: AssetWire): string {\n  return bytesToHex(serializeAssetBytes(info));\n}\nexport function serializeAssetBytes(info: AssetWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(serializeAddressBytes(info.address));\n  bytesArray.push(serializeLPStringBytes(info.contractName));\n  bytesArray.push(serializeLPStringBytes(info.assetName));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAsset(serialized: string | Uint8Array | BytesReader): AssetWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  return {\n    type: StacksWireType.Asset,\n    address: deserializeAddress(bytesReader),\n    contractName: deserializeLPString(bytesReader),\n    assetName: deserializeLPString(bytesReader),\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): string {\n  return bytesToHex(serializeLPListBytes(lpList));\n}\nexport function serializeLPListBytes(lpList: LengthPrefixedList): Uint8Array {\n  const list = lpList.values;\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n  for (const l of list) {\n    bytesArray.push(serializeStacksWireBytes(l));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPList<\n  TType extends StacksWireType = StacksWireType,\n  TWire extends StacksWire = TType extends StacksWireType.Address\n    ? AddressWire\n    : TType extends StacksWireType.LengthPrefixedString\n      ? LengthPrefixedStringWire\n      : TType extends StacksWireType.MemoString\n        ? MemoStringWire\n        : TType extends StacksWireType.Asset\n          ? AssetWire\n          : TType extends StacksWireType.PostCondition\n            ? PostConditionWire\n            : TType extends StacksWireType.PublicKey\n              ? PublicKeyWire\n              : TType extends StacksWireType.TransactionAuthField\n                ? TransactionAuthFieldWire\n                : StacksWire,\n>(\n  serialized: string | Uint8Array | BytesReader,\n  type: TType,\n  lengthPrefixBytes?: number\n  // todo: `next` refactor for inversion of control\n): LengthPrefixedList<TWire> {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n\n  const l: StacksWire[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksWireType.Address:\n        l.push(deserializeAddress(bytesReader));\n        break;\n      case StacksWireType.LengthPrefixedString:\n        l.push(deserializeLPString(bytesReader));\n        break;\n      case StacksWireType.MemoString:\n        l.push(deserializeMemoString(bytesReader));\n        break;\n      case StacksWireType.Asset:\n        l.push(deserializeAsset(bytesReader));\n        break;\n      case StacksWireType.PostCondition:\n        l.push(deserializePostConditionWire(bytesReader));\n        break;\n      case StacksWireType.PublicKey:\n        l.push(deserializePublicKey(bytesReader));\n        break;\n      case StacksWireType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bytesReader));\n        break;\n    }\n  }\n  return createLPList<TWire>(l as TWire[], lengthPrefixBytes);\n}\n\nexport function serializePostConditionWire(postCondition: PostConditionWire): string {\n  return bytesToHex(serializePostConditionWireBytes(postCondition));\n}\n\nexport function serializePostConditionWireBytes(postCondition: PostConditionWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(postCondition.conditionType);\n  bytesArray.push(serializePrincipalBytes(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bytesArray.push(serializeAssetBytes(postCondition.asset));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bytesArray.push(serializeCVBytes(postCondition.assetName));\n  }\n\n  bytesArray.push(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    // SIP-005: Maximal length of amount is 8 bytes\n    if (postCondition.amount > BigInt('0xffffffffffffffff'))\n      throw new SerializationError('The post-condition amount may not be larger than 8 bytes');\n    bytesArray.push(intToBytes(postCondition.amount, 8));\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePostConditionWire(\n  serialized: string | Uint8Array | BytesReader\n): PostConditionWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bytesReader);\n\n  let conditionCode;\n  let asset;\n  let amount: bigint;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      asset = deserializeAsset(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        asset: asset,\n      };\n    case PostConditionType.NonFungible:\n      asset = deserializeAsset(bytesReader);\n      const assetName = deserializeCV(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        asset,\n        assetName,\n      };\n  }\n}\n\nexport function serializePayload(payload: PayloadInput): string {\n  return bytesToHex(serializePayloadBytes(payload));\n}\n/** @ignore */\nexport function serializePayloadBytes(payload: PayloadInput): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bytesArray.push(serializeCVBytes(payload.recipient));\n      bytesArray.push(intToBytes(payload.amount, 8));\n      bytesArray.push(serializeStacksWireBytes(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bytesArray.push(serializeStacksWireBytes(payload.contractAddress));\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.functionName));\n      const numArgs = new Uint8Array(4);\n      writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n      bytesArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bytesArray.push(serializeCVBytes(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n      break;\n    case PayloadType.VersionedSmartContract:\n      bytesArray.push(payload.clarityVersion);\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      break;\n    case PayloadType.CoinbaseToAltRecipient:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCVBytes(payload.recipient));\n      break;\n    case PayloadType.NakamotoCoinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCVBytes(payload.recipient ? someCV(payload.recipient) : noneCV()));\n      bytesArray.push(payload.vrfProof);\n      break;\n    case PayloadType.TenureChange:\n      bytesArray.push(hexToBytes(payload.tenureHash));\n      bytesArray.push(hexToBytes(payload.previousTenureHash));\n      bytesArray.push(hexToBytes(payload.burnViewHash));\n      bytesArray.push(hexToBytes(payload.previousTenureEnd));\n      bytesArray.push(writeUInt32BE(new Uint8Array(4), payload.previousTenureBlocks));\n      bytesArray.push(writeUInt8(new Uint8Array(1), payload.cause));\n      bytesArray.push(hexToBytes(payload.publicKeyHash));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\n/** @ignore */\nexport function deserializePayload(serialized: string | Uint8Array | BytesReader): PayloadWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bytesReader) as PrincipalCV;\n      const amount = intToBigInt(bytesReader.readBytes(8));\n      const memo = deserializeMemoString(bytesReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bytesReader);\n      const contractCallName = deserializeLPString(bytesReader);\n      const functionName = deserializeLPString(bytesReader);\n      const functionArgs: ClarityValue[] = [];\n      const numberOfArgs = bytesReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bytesReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody);\n\n    case PayloadType.VersionedSmartContract: {\n      const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n        throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n      });\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, STRING_MAX_LENGTH);\n      return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n    }\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      return createCoinbasePayload(coinbaseBytes);\n    }\n    case PayloadType.CoinbaseToAltRecipient: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const altRecipient = deserializeCV(bytesReader) as PrincipalCV;\n      return createCoinbasePayload(coinbaseBytes, altRecipient);\n    }\n    case PayloadType.NakamotoCoinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const recipient = deserializeCV(bytesReader) as OptionalCV<PrincipalCV>;\n      const vrfProof = bytesReader.readBytes(VRF_PROOF_BYTES_LENGTH);\n      return createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof);\n    }\n    case PayloadType.TenureChange:\n      const tenureHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureHash = bytesToHex(bytesReader.readBytes(20));\n      const burnViewHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureEnd = bytesToHex(bytesReader.readBytes(32));\n      const previousTenureBlocks = bytesReader.readUInt32BE();\n      const cause = bytesReader.readUInt8Enum(TenureChangeCause, n => {\n        throw new Error(`Cannot recognize TenureChangeCause: ${n}`);\n      });\n      const publicKeyHash = bytesToHex(bytesReader.readBytes(20));\n      return createTenureChangePayload(\n        tenureHash,\n        previousTenureHash,\n        burnViewHash,\n        previousTenureEnd,\n        previousTenureBlocks,\n        cause,\n        publicKeyHash\n      );\n  }\n}\n\n/** @ignore */\nexport function deserializeMessageSignature(\n  serialized: string | Uint8Array | BytesReader\n): MessageSignatureWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  return createMessageSignature(\n    bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  );\n}\n\n/** @ignore */\nexport function deserializeTransactionAuthField(\n  serialized: string | Uint8Array | BytesReader\n): TransactionAuthFieldWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        createStacksPublicKey(uncompressPublicKey(deserializePublicKey(bytesReader).data))\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignatureWire): string {\n  return bytesToHex(serializeMessageSignatureBytes(messageSignature));\n}\n/** @ignore */\nexport function serializeMessageSignatureBytes(messageSignature: MessageSignatureWire): Uint8Array {\n  return hexToBytes(messageSignature.data);\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthFieldWire): string {\n  return bytesToHex(serializeTransactionAuthFieldBytes(field));\n}\n/** @ignore */\nexport function serializeTransactionAuthFieldBytes(field: TransactionAuthFieldWire): Uint8Array {\n  const bytesArray = [];\n\n  switch (field.contents.type) {\n    case StacksWireType.PublicKey:\n      bytesArray.push(\n        field.pubKeyEncoding === PubKeyEncoding.Compressed\n          ? AuthFieldType.PublicKeyCompressed\n          : AuthFieldType.PublicKeyUncompressed\n      );\n      bytesArray.push(hexToBytes(compressPublicKey(field.contents.data)));\n      break;\n    case StacksWireType.MessageSignature:\n      bytesArray.push(\n        field.pubKeyEncoding === PubKeyEncoding.Compressed\n          ? AuthFieldType.SignatureCompressed\n          : AuthFieldType.SignatureUncompressed\n      );\n      bytesArray.push(serializeMessageSignatureBytes(field.contents));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function serializePublicKey(key: PublicKeyWire): string {\n  return bytesToHex(serializePublicKeyBytes(key));\n}\n\n/** @ignore */\nexport function serializePublicKeyBytes(key: PublicKeyWire): Uint8Array {\n  return key.data.slice();\n}\n\n/** @ignore */\nexport function deserializePublicKey(serialized: string | Uint8Array | BytesReader): PublicKeyWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const fieldId = bytesReader.readUInt8();\n  const keyLength =\n    fieldId === 4 ? UNCOMPRESSED_PUBKEY_LENGTH_BYTES : COMPRESSED_PUBKEY_LENGTH_BYTES;\n  return createStacksPublicKey(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n","import { IntegerType } from '@stacks/common';\nimport { ClarityValue, PrincipalCV } from '../clarity';\nimport {\n  AddressVersion,\n  ClarityVersion,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionPrincipalId,\n  PostConditionType,\n  PubKeyEncoding,\n  TenureChangeCause,\n} from '../constants';\n\n// todo: add explicit enum values\n/**\n * The type of message that is being serialized.\n * Used internally for serializing and deserializing messages.\n */\nexport enum StacksWireType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  Asset,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\ntype WhenWireTypeMap<T> = Record<StacksWireType, T>;\n\nexport function whenWireType(wireType: StacksWireType) {\n  return <T>(wireTypeMap: WhenWireTypeMap<T>): T => wireTypeMap[wireType];\n}\n\nexport type StacksWire =\n  | AddressWire\n  | PostConditionPrincipalWire\n  | LengthPrefixedStringWire\n  | LengthPrefixedList\n  | PayloadWire\n  | MemoStringWire\n  | AssetWire\n  | PostConditionWire\n  | PublicKeyWire\n  | TransactionAuthFieldWire\n  | MessageSignatureWire;\n\nexport interface MemoStringWire {\n  readonly type: StacksWireType.MemoString;\n  readonly content: string;\n}\n\nexport interface PublicKeyWire {\n  readonly type: StacksWireType.PublicKey;\n  readonly data: Uint8Array;\n}\n\nexport interface LengthPrefixedList<TWire extends StacksWire = StacksWire> {\n  readonly type: StacksWireType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: TWire[];\n}\n\nexport interface AddressWire {\n  readonly type: StacksWireType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string; // todo: next rename to `hash` or `bytes` or `data`\n}\n\nexport interface MessageSignatureWire {\n  readonly type: StacksWireType.MessageSignature;\n  data: string;\n}\n\nexport type PayloadWire =\n  | TokenTransferPayloadWire\n  | ContractCallPayload\n  | SmartContractPayloadWire\n  | VersionedSmartContractPayloadWire\n  | PoisonPayloadWire\n  | CoinbasePayloadWire\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayloadWire\n  | TenureChangePayloadWire;\n\nexport interface TokenTransferPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: bigint;\n  readonly memo: MemoStringWire;\n}\n\nexport type PayloadInput =\n  | (\n      | TokenTransferPayloadWire\n      | (Omit<TokenTransferPayloadWire, 'amount'> & { amount: IntegerType })\n    )\n  | ContractCallPayload\n  | SmartContractPayloadWire\n  | VersionedSmartContractPayloadWire\n  | PoisonPayloadWire\n  | CoinbasePayloadWire\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayloadWire\n  | TenureChangePayloadWire;\n\nexport interface ContractCallPayload {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly functionName: LengthPrefixedStringWire;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport interface SmartContractPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly codeBody: LengthPrefixedStringWire;\n}\n\nexport interface VersionedSmartContractPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.VersionedSmartContract;\n  readonly clarityVersion: ClarityVersion;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly codeBody: LengthPrefixedStringWire;\n}\n\nexport interface PoisonPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport interface CoinbasePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBytes: Uint8Array;\n}\n\nexport interface CoinbasePayloadToAltRecipient {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.CoinbaseToAltRecipient;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient: PrincipalCV;\n}\n\nexport interface NakamotoCoinbasePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.NakamotoCoinbase;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient?: PrincipalCV;\n  readonly vrfProof: Uint8Array;\n}\n\nexport interface TenureChangePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.TenureChange;\n  /**\n   * The consensus hash of this tenure (hex string). Corresponds to the\n   * sortition in which the miner of this block was chosen. It may be the case\n   * that this miner's tenure gets _extended_ acrosssubsequent sortitions; if\n   * this happens, then this `consensus_hash` value _remains the same _as the\n   * sortition in which the winning block-commit was mined.\n   */\n  readonly tenureHash: string;\n  /**\n   * The consensus hash (hex string) of the previous tenure.  Corresponds to the\n   * sortition of the previous winning block-commit.\n   */\n  readonly previousTenureHash: string;\n  /**\n   * Current consensus hash (hex string) on the underlying burnchain.\n   * Corresponds to the last-seen sortition.\n   */\n  readonly burnViewHash: string;\n  /** Stacks block hash (hex string) */\n  readonly previousTenureEnd: string;\n  /** The number of blocks produced since the last sortition-linked tenure */\n  readonly previousTenureBlocks: number;\n  /** The cause of change in mining tenure */\n  readonly cause: TenureChangeCause;\n  /** The public key hash of the current tenure (hex string) */\n  readonly publicKeyHash: string;\n}\n\n/** @ignore */\nexport interface OriginPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Origin;\n}\n\n/** @ignore */\nexport interface StandardPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Standard;\n  readonly address: AddressWire;\n}\n\n/** @ignore */\nexport interface ContractPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Contract;\n  readonly address: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n}\n\n/** @ignore */\nexport interface LengthPrefixedStringWire {\n  readonly type: StacksWireType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\n/** @ignore */\nexport interface AssetWire {\n  readonly type: StacksWireType.Asset;\n  readonly address: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly assetName: LengthPrefixedStringWire;\n}\n\n/** @ignore */\nexport interface STXPostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n}\n\n/** @ignore */\nexport interface FungiblePostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n  readonly asset: AssetWire;\n}\n\n/** @ignore */\nexport interface NonFungiblePostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly asset: AssetWire;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\n/** @ignore */\nexport type PostConditionWire =\n  | STXPostConditionWire\n  | FungiblePostConditionWire\n  | NonFungiblePostConditionWire;\n\n/** @ignore */\nexport type PostConditionPrincipalWire =\n  | OriginPrincipalWire\n  | StandardPrincipalWire\n  | ContractPrincipalWire;\n\nexport interface TransactionAuthFieldWire {\n  type: StacksWireType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContentsWire;\n}\n\nexport type TransactionAuthFieldContentsWire = PublicKeyWire | MessageSignatureWire;\n\n/** @see {@link AuthFieldType} */\nexport interface TransactionAuthFieldWire {\n  type: StacksWireType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContentsWire;\n}\n\n// todo: this file should hold the type definitions for more message types later\n// needed now to fix a circular dependency issue in structuredDataSignature\n\n/** @deprecated  */\nexport interface StructuredDataSignatureWire {\n  readonly type: StacksWireType.StructuredDataSignature;\n  data: string;\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","export function equals(a, b) {\n    if (a.byteLength !== b.byteLength)\n        return false;\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexport function alloc(length, value) {\n    const a = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        a[i] = value;\n    }\n    return a;\n}\nexport function readUInt16BE(source, offset) {\n    return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(destination, value, offset = 0) {\n    destination[offset + 0] = value >>> 8;\n    destination[offset + 1] = value >>> 0;\n    return destination;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset = 0) {\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt16LE(source, offset) {\n    return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\nexport function writeUInt16LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    return destination;\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24 +\n        source[offset + 1] * 2 ** 16 +\n        source[offset + 2] * 2 ** 8 +\n        source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset = 0) {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt32LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0) |\n        ((source[offset + 2] << 16) >>> 0) |\n        ((source[offset + 3] << 24) >>> 0));\n}\nexport function writeUInt32LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    value >>>= 8;\n    destination[offset + 2] = value & 255;\n    value >>>= 8;\n    destination[offset + 3] = value & 255;\n    return destination;\n}\n//# sourceMappingURL=buffer.js.map","export const HIRO_MAINNET_URL = 'https://api.mainnet.hiro.so';\nexport const HIRO_TESTNET_URL = 'https://api.testnet.hiro.so';\nexport const DEVNET_URL = 'http://localhost:3999';\nexport const GAIA_URL = 'https://hub.blockstack.org';\nexport const PRIVATE_KEY_BYTES_COMPRESSED = 33;\nexport const PRIVATE_KEY_BYTES_UNCOMPRESSED = 32;\n//# sourceMappingURL=constants.js.map","import { Logger } from './logger';\nexport const BLOCKSTACK_HANDLER = 'blockstack';\nexport function nextYear() {\n    return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\nexport function nextMonth() {\n    return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\nexport function nextHour() {\n    return new Date(new Date().setHours(new Date().getHours() + 1));\n}\nexport function megabytesToBytes(megabytes) {\n    if (!Number.isFinite(megabytes)) {\n        return 0;\n    }\n    return Math.floor(megabytes * 1024 * 1024);\n}\nexport function getAesCbcOutputLength(inputByteLength) {\n    const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n    return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n    const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n    return encodedLength;\n}\nexport function updateQueryStringParameter(uri, key, value) {\n    const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n    const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n    if (uri.match(re)) {\n        return uri.replace(re, `$1${key}=${value}$2`);\n    }\n    else {\n        return `${uri}${separator}${key}=${value}`;\n    }\n}\nexport function isLaterVersion(v1, v2) {\n    if (v1 === undefined || v1 === '') {\n        v1 = '0.0.0';\n    }\n    if (v2 === undefined || v1 === '') {\n        v2 = '0.0.0';\n    }\n    const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n    const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n    for (let index = 0; index < v2.length; index++) {\n        if (index >= v1.length) {\n            v2tuple.push(0);\n        }\n        if (v1tuple[index] < v2tuple[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function makeUUID4() {\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n        d += performance.now();\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\nexport function isSameOriginAbsoluteUrl(uri1, uri2) {\n    try {\n        const parsedUri1 = new URL(uri1);\n        const parsedUri2 = new URL(uri2);\n        const port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n        const port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n        const match = {\n            scheme: parsedUri1.protocol === parsedUri2.protocol,\n            hostname: parsedUri1.hostname === parsedUri2.hostname,\n            port: port1 === port2,\n            absolute: (uri1.includes('http://') || uri1.includes('https://')) &&\n                (uri2.includes('http://') || uri2.includes('https://')),\n        };\n        return match.scheme && match.hostname && match.port && match.absolute;\n    }\n    catch (error) {\n        console.log(error);\n        console.log('Parsing error in same URL origin check');\n        return false;\n    }\n}\nexport function getGlobalScope() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n    if (usageDesc) {\n        return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n    else {\n        return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n}\nexport function getGlobalObject(name, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope = undefined;\n    try {\n        globalScope = getGlobalScope();\n        if (globalScope) {\n            const obj = globalScope[name];\n            if (obj) {\n                return obj;\n            }\n        }\n    }\n    catch (error) {\n        Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n    }\n    if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n    }\n    if (returnEmptyObject) {\n        return {};\n    }\n    return undefined;\n}\nexport function getGlobalObjects(names, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope;\n    try {\n        globalScope = getGlobalScope();\n    }\n    catch (error) {\n        Logger.error(`Error getting global scope: ${error}`);\n        if (throwIfUnavailable) {\n            const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n            Logger.error(errMsg);\n            throw errMsg;\n        }\n        else if (returnEmptyObject) {\n            globalScope = {};\n        }\n    }\n    const result = {};\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        try {\n            if (globalScope) {\n                const obj = globalScope[name];\n                if (obj) {\n                    result[name] = obj;\n                }\n                else if (throwIfUnavailable) {\n                    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                    Logger.error(errMsg);\n                    throw new Error(errMsg);\n                }\n                else if (returnEmptyObject) {\n                    result[name] = {};\n                }\n            }\n        }\n        catch (error) {\n            if (throwIfUnavailable) {\n                const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                Logger.error(errMsg);\n                throw new Error(errMsg);\n            }\n        }\n    }\n    return result;\n}\nexport function intToBytes(value, byteLength) {\n    return bigIntToBytes(intToBigInt(value), byteLength);\n}\nexport function intToBigInt(value) {\n    if (typeof value === 'bigint')\n        return value;\n    if (typeof value === 'string')\n        return BigInt(value);\n    if (typeof value === 'number') {\n        if (!Number.isInteger(value)) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n        }\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be less than or equal to ${Number.MAX_SAFE_INTEGER}. For larger values, try using a BigInt instead.`);\n        }\n        return BigInt(value);\n    }\n    if (isInstance(value, Uint8Array))\n        return BigInt(`0x${bytesToHex(value)}`);\n    throw new TypeError(`intToBigInt: Invalid value type. Must be a number, bigint, BigInt-compatible string, or Uint8Array.`);\n}\nexport function with0x(value) {\n    return /^0x/i.test(value)\n        ? value\n        : `0x${value}`;\n}\nexport function without0x(value) {\n    return /^0x/i.test(value)\n        ? value.slice(2)\n        : value;\n}\nexport function hexToBigInt(hex) {\n    if (typeof hex !== 'string')\n        throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n    return BigInt(`0x${hex}`);\n}\nexport function intToHex(integer, byteLength = 8) {\n    const value = typeof integer === 'bigint' ? integer : intToBigInt(integer);\n    return value.toString(16).padStart(byteLength * 2, '0');\n}\nexport function hexToInt(hex) {\n    return parseInt(hex, 16);\n}\nexport function bigIntToBytes(value, length = 16) {\n    const hex = intToHex(value, length);\n    return hexToBytes(hex);\n}\nexport function toTwos(value, width) {\n    if (value < -(BigInt(1) << (width - BigInt(1))) ||\n        (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value) {\n        throw `Unable to represent integer in width: ${width}`;\n    }\n    if (value >= BigInt(0)) {\n        return BigInt(value);\n    }\n    return value + (BigInt(1) << width);\n}\nfunction nthBit(value, n) {\n    return value & (BigInt(1) << n);\n}\nexport function bytesToTwosBigInt(bytes) {\n    return fromTwos(BigInt(`0x${bytesToHex(bytes)}`), BigInt(bytes.byteLength * 8));\n}\nexport function fromTwos(value, width) {\n    if (nthBit(value, width - BigInt(1))) {\n        return value - (BigInt(1) << width);\n    }\n    return value;\n}\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (const u of uint8a) {\n        hex += hexes[u];\n    }\n    return hex;\n}\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n    }\n    hex = without0x(hex);\n    hex = hex.length % 2 ? `0${hex}` : hex;\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexport function utf8ToBytes(str) {\n    return new TextEncoder().encode(str);\n}\nexport function bytesToUtf8(arr) {\n    return new TextDecoder().decode(arr);\n}\nexport function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; i++) {\n        byteArray.push(str.charCodeAt(i) & 0xff);\n    }\n    return new Uint8Array(byteArray);\n}\nexport function bytesToAscii(arr) {\n    return String.fromCharCode.apply(null, arr);\n}\nfunction isNotOctet(octet) {\n    return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\nexport function octetsToBytes(numbers) {\n    if (numbers.some(isNotOctet))\n        throw new Error('Some values are invalid bytes.');\n    return new Uint8Array(numbers);\n}\nexport function concatBytes(...arrays) {\n    if (!arrays.every(a => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function concatArray(elements) {\n    return concatBytes(...elements.map(e => {\n        if (typeof e === 'number')\n            return octetsToBytes([e]);\n        if (e instanceof Array)\n            return octetsToBytes(e);\n        return e;\n    }));\n}\nexport function isInstance(object, clazz) {\n    return object instanceof clazz || object?.constructor?.name?.toLowerCase() === clazz.name;\n}\nexport function validateHash256(hex) {\n    hex = without0x(hex);\n    if (hex.length !== 64)\n        return false;\n    return /^[0-9a-fA-F]+$/.test(hex);\n}\n//# sourceMappingURL=utils.js.map","export var ChainId;\n(function (ChainId) {\n    ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n    ChainId[ChainId[\"Testnet\"] = 2147483648] = \"Testnet\";\n})(ChainId || (ChainId = {}));\nexport var PeerNetworkId;\n(function (PeerNetworkId) {\n    PeerNetworkId[PeerNetworkId[\"Mainnet\"] = 385875968] = \"Mainnet\";\n    PeerNetworkId[PeerNetworkId[\"Testnet\"] = 4278190080] = \"Testnet\";\n})(PeerNetworkId || (PeerNetworkId = {}));\nexport const DEFAULT_CHAIN_ID = ChainId.Mainnet;\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport var AddressVersion;\n(function (AddressVersion) {\n    AddressVersion[AddressVersion[\"MainnetSingleSig\"] = 22] = \"MainnetSingleSig\";\n    AddressVersion[AddressVersion[\"MainnetMultiSig\"] = 20] = \"MainnetMultiSig\";\n    AddressVersion[AddressVersion[\"TestnetSingleSig\"] = 26] = \"TestnetSingleSig\";\n    AddressVersion[AddressVersion[\"TestnetMultiSig\"] = 21] = \"TestnetMultiSig\";\n})(AddressVersion || (AddressVersion = {}));\nexport const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\nexport function whenTransactionVersion(transactionVersion) {\n    return (map) => map[transactionVersion];\n}\n//# sourceMappingURL=constants.js.map","const defaultFetchOpts = {\n    referrerPolicy: 'origin',\n    headers: {\n        'x-hiro-product': 'stacksjs',\n    },\n};\nexport const getFetchOptions = () => {\n    return defaultFetchOpts;\n};\nexport const setFetchOptions = (ops) => {\n    return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n    const fetchOpts = {};\n    Object.assign(fetchOpts, defaultFetchOpts, init);\n    const fetchResult = await fetch(input, fetchOpts);\n    return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n    if (typeof pattern === 'string')\n        return pattern === host;\n    return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i, httpHeader = 'x-api-key', }) {\n    return {\n        pre: context => {\n            const reqUrl = new URL(context.url);\n            if (!hostMatches(reqUrl.host, host))\n                return;\n            const headers = context.init.headers instanceof Headers\n                ? context.init.headers\n                : (context.init.headers = new Headers(context.init.headers));\n            headers.set(httpHeader, apiKey);\n        },\n    };\n}\nfunction argsForCreateFetchFn(args) {\n    let fetchLib = fetchWrapper;\n    let middlewares = [];\n    if (args.length > 0 && typeof args[0] === 'function') {\n        fetchLib = args.shift();\n    }\n    if (args.length > 0) {\n        middlewares = args;\n    }\n    return { fetchLib, middlewares };\n}\nexport function createFetchFn(...args) {\n    const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n    const fetchFn = async (url, init) => {\n        let fetchParams = { url, init: init ?? {} };\n        for (const middleware of middlewares) {\n            if (typeof middleware.pre === 'function') {\n                const result = await Promise.resolve(middleware.pre({\n                    fetch: fetchLib,\n                    ...fetchParams,\n                }));\n                fetchParams = result ?? fetchParams;\n            }\n        }\n        let response = await fetchLib(fetchParams.url, fetchParams.init);\n        for (const middleware of middlewares) {\n            if (typeof middleware.post === 'function') {\n                const result = await Promise.resolve(middleware.post({\n                    fetch: fetchLib,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response?.clone() ?? response,\n                }));\n                response = result ?? response;\n            }\n        }\n        return response;\n    };\n    return fetchFn;\n}\n//# sourceMappingURL=fetch.js.map","import { DEVNET_URL, HIRO_MAINNET_URL, HIRO_TESTNET_URL, createFetchFn, createApiKeyMiddleware, } from '@stacks/common';\nimport { AddressVersion, ChainId, PeerNetworkId, TransactionVersion } from './constants';\nexport const STACKS_MAINNET = {\n    chainId: ChainId.Mainnet,\n    transactionVersion: TransactionVersion.Mainnet,\n    peerNetworkId: PeerNetworkId.Mainnet,\n    magicBytes: 'X2',\n    bootAddress: 'SP000000000000000000002Q6VF78',\n    addressVersion: {\n        singleSig: AddressVersion.MainnetSingleSig,\n        multiSig: AddressVersion.MainnetMultiSig,\n    },\n    client: { baseUrl: HIRO_MAINNET_URL },\n};\nexport const STACKS_TESTNET = {\n    chainId: ChainId.Testnet,\n    transactionVersion: TransactionVersion.Testnet,\n    peerNetworkId: PeerNetworkId.Testnet,\n    magicBytes: 'T2',\n    bootAddress: 'ST000000000000000000002AMW42H',\n    addressVersion: {\n        singleSig: AddressVersion.TestnetSingleSig,\n        multiSig: AddressVersion.TestnetMultiSig,\n    },\n    client: { baseUrl: HIRO_TESTNET_URL },\n};\nexport const STACKS_DEVNET = {\n    ...STACKS_TESTNET,\n    addressVersion: { ...STACKS_TESTNET.addressVersion },\n    magicBytes: 'id',\n    client: { baseUrl: DEVNET_URL },\n};\nexport const STACKS_MOCKNET = {\n    ...STACKS_DEVNET,\n    addressVersion: { ...STACKS_DEVNET.addressVersion },\n    client: { ...STACKS_DEVNET.client },\n};\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'];\nexport function networkFromName(name) {\n    switch (name) {\n        case 'mainnet':\n            return STACKS_MAINNET;\n        case 'testnet':\n            return STACKS_TESTNET;\n        case 'devnet':\n            return STACKS_DEVNET;\n        case 'mocknet':\n            return STACKS_MOCKNET;\n        default:\n            throw new Error(`Unknown network name: ${name}`);\n    }\n}\nexport function networkFrom(network) {\n    if (typeof network === 'string')\n        return networkFromName(network);\n    return network;\n}\nexport function defaultUrlFromNetwork(network) {\n    if (!network)\n        return HIRO_MAINNET_URL;\n    network = networkFrom(network);\n    return !network || network.transactionVersion === TransactionVersion.Mainnet\n        ? HIRO_MAINNET_URL\n        : network.magicBytes === 'id'\n            ? DEVNET_URL\n            : HIRO_TESTNET_URL;\n}\nexport function clientFromNetwork(network) {\n    if (network.client.fetch)\n        return network.client;\n    return {\n        ...network.client,\n        fetch: createFetchFn(),\n    };\n}\nexport function createNetwork(arg1, arg2) {\n    const baseNetwork = networkFrom(typeof arg1 === 'object' && 'network' in arg1 ? arg1.network : arg1);\n    const newNetwork = {\n        ...baseNetwork,\n        addressVersion: { ...baseNetwork.addressVersion },\n        client: { ...baseNetwork.client },\n    };\n    if (typeof arg1 === 'object' && 'network' in arg1) {\n        if (arg1.client) {\n            newNetwork.client.baseUrl = arg1.client.baseUrl ?? newNetwork.client.baseUrl;\n            newNetwork.client.fetch = arg1.client.fetch ?? newNetwork.client.fetch;\n        }\n        if (typeof arg1.apiKey === 'string') {\n            const middleware = createApiKeyMiddleware(arg1);\n            newNetwork.client.fetch = newNetwork.client.fetch\n                ? createFetchFn(newNetwork.client.fetch, middleware)\n                : createFetchFn(middleware);\n        }\n        return newNetwork;\n    }\n    if (typeof arg2 === 'string') {\n        const middleware = createApiKeyMiddleware({ apiKey: arg2 });\n        newNetwork.client.fetch = newNetwork.client.fetch\n            ? createFetchFn(newNetwork.client.fetch, middleware)\n            : createFetchFn(middleware);\n        return newNetwork;\n    }\n    return newNetwork;\n}\n//# sourceMappingURL=network.js.map","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};"],"names":["root","factory","exports","module","define","amd","this","leafPrototypes","getProto","number","n","Number","isSafeInteger","Error","bool","b","bytes","lengths","Uint8Array","TypeError","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","Object","defineProperty","value","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","pos","buffer","view","createView","update","data","default","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","crypto","node","undefined","web","self","sha224","sha256","_sha2_js_1","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","SHA224","wrapConstructor","randomBytes","wrapConstructorWithOpts","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","arr","byteLength","floor","DataView","word","shift","hexes","Array","from","v","toString","padStart","str","TextEncoder","encode","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","clone","defaults","opts","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","hashCons","msg","bytesLength","getRandomValues","ALPHABET","BASE_MAP","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","isArray","pbegin","pend","b58","it1","it2","repeat","decode","string","c32ToB58","b58ToC32","c32addressDecode","c32address","versions","checksum_1","base58check","utils_1","mainnet","p2pkh","p2sh","testnet","ADDR_BITCOIN_TO_STACKS","ADDR_STACKS_TO_BITCOIN","version","hash160hex","match","c32checkEncode","c32addr","c32checkDecode","b58check","addrInfo","hash160String","addrVersion","prefix","stacksVersion","c32string","bitcoinVersion","sha256_1","basex","dataBytes","prefixBytes","checksum","forEach","check","index","encoding_1","c32checksum","dataHex","dataHash","toLowerCase","versionHex","checksumHex","c32str","c32encode","c32","c32data","c32normalize","c32decode","versionChar","indexOf","substring","c32input","toUpperCase","replace","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","TextDecoder","numLeadingZeroBytesInHex","count","join","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","address_1","enumerable","enumCheckFunctions","Map","isEnum","enumVariable","checker","newChecker","enumValues","values","filter","enumValueSet","Set","has","createEnumChecker","BytesReader","consumed","readBytes","readUInt32BE","readUInt8","readUInt16BE","readBigUIntLE","reverse","readBigUIntBE","readOffset","val","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","num","addressHashModeToVersion","hashMode","network","P2PKH","transactionVersion","Mainnet","MainnetSingleSig","Testnet","TestnetSingleSig","P2SH","P2SHNonSequential","P2WPKH","P2WSH","P2WSHNonSequential","MainnetMultiSig","TestnetMultiSig","emptyMessageSignature","type","MessageSignature","createSpendingCondition","options","createSingleSigSpendingCondition","publicKey","nonce","fee","createMultiSigSpendingCondition","numSignatures","publicKeys","pubKey","signer","hash160","keyEncoding","Compressed","Uncompressed","signature","numSigs","pubKeys","stacksPublicKeys","map","fields","signaturesRequired","isSingleSig","condition","isSequentialMultiSig","isNonSequentialMultiSig","clearCondition","cloned","serializeSingleSigSpendingCondition","serializeSingleSigSpendingConditionBytes","bytesArray","serializeMultiSigSpendingCondition","serializeMultiSigSpendingConditionBytes","push","deserializeSingleSigSpendingCondition","bytesReader","deserializeMultiSigSpendingCondition","TransactionAuthField","haveUncompressed","field","contents","PublicKey","pubKeyEncoding","serializeSpendingCondition","serializeSpendingConditionBytes","deserializeSpendingCondition","sigHashPreSign","curSigHash","authType","sigHash","sigHashPostSign","hashLength","sigHashBytes","nextSignature","privateKey","sigHashPre","nextSig","nextSigHash","nextVerification","initialSigHash","createStandardAuth","spendingCondition","Standard","createSponsoredAuth","sponsorSpendingCondition","Sponsored","intoInitialSighashAuth","auth","newInitialSigHash","verifyOrigin","addrBytes","verifySingleSig","verifyMultiSig","verify","setFee","amount","getFee","setNonce","setSponsorNonce","setSponsor","sc","serializeAuthorization","serializeAuthorizationBytes","deserializeAuthorization","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","memo","sponsored","client","payload","recipient","useNonSequentialMultiSig","address","sortPublicKeysForAddress","authorization","transaction","chainId","addressVersion","singleSig","txNonce","makeSTXTokenTransfer","senderKey","privKey","signOrigin","mutatingSignAppendMultiSig","signerKeys","makeContractDeploy","makeUnsignedContractDeploy","postConditionMode","Deny","clarityVersion","Clarity3","contractName","codeBody","postConditions","pc","lpPostConditions","makeUnsignedContractCall","contractAddress","functionName","functionArgs","validateWithAbi","abi","makeContractCall","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","sponsorPubKey","sponsorPrivateKey","txFee","payloadType","TokenTransfer","SmartContract","VersionedSmartContract","ContractCall","createSponsorSigner","signSponsor","pubs","signerKey","find","key","appendOrigin","publicKeysSorted","sort","JSON","stringify","formatSpace","space","depth","end","prettyPrintWithDepth","cv","BoolFalse","BoolTrue","Int","UInt","StringASCII","StringUTF8","PrincipalContract","PrincipalStandard","Buffer","OptionalNone","OptionalSome","ResponseOk","ResponseErr","List","spaceBefore","endSpace","formatList","Tuple","keys","items","entries","formatTuple","param","exhaustiveCheck","prettyPrint","intCV","uint","principal","addr","name","split","contractPrincipal","standardPrincipal","list","listCV","stringAscii","stringUtf8","bufferCV","bufferFromHex","bufferFromAscii","ascii","bufferFromUtf8","utf8","none","some","ok","error","tuple","tupleCV","serialize","deserialize","cvToString","encoding","test","cvToValue","strictJsonCompat","cvToJSON","getCVTypeString","success","ceil","isClarityType","input","withType","ClarityType","ClarityWireType","clarityTypeToByte","clarityByteToType","wireType","deserializeCV","serializedClarityValue","hasHexPrefix","int","bufferLength","true","false","sAddress","contract","cAddress","err","listLength","listContents","tupleLength","tupleContents","clarityName","content","asciiStrLen","asciiStr","utf8StrLen","utf8Str","regex","pattern","s","rest","capture","whitespace","lazy","either","combinators","entire","combinator","optional","sequence","captures","chain","flatMap","parens","greedy","separator","sepResult","clInt","clUint","clBool","clPrincipal","clBuffer","unescape","parse","clAscii","t","clUtf8","clList","clValue","clTuple","k","clNone","clSome","clOk","clErr","clarityValueString","internal_parseCommaSeparated","bytesWithTypeID","typeId","serializeStringCV","serializeCV","serializeCVBytes","serializeBoolCV","serializeBufferCV","serializeUIntCV","serializeIntCV","serializeStandardPrincipalCV","serializeContractPrincipalCV","serializeResponseCV","serializedValue","serializeListCV","lexicographicOrder","localeCompare","nameWithLength","serializeTupleCV","serializeStringAsciiCV","serializeStringUtf8CV","trueCV","falseCV","boolCV","bufferCVFromString","MAX_U128","MIN_U128","MAX_I128","MIN_I128","startsWith","bigInt","RangeError","uintCV","noneCV","someCV","optionalCVOf","principalCV","contractPrincipalCV","standardPrincipalCV","addressString","standardPrincipalCVFromAddress","contractPrincipalCVFromAddress","contractPrincipalCVFromStandard","sp","responseErrorCV","responseOkCV","stringAsciiCV","stringUtf8CV","stringCV","BLOCKSTACK_DEFAULT_GAIA_HUB_URL","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","COINBASE_BYTES_LENGTH","VRF_PROOF_BYTES_LENGTH","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","STRING_MAX_LENGTH","MAX_PAYLOAD_LEN","PayloadType","ClarityVersion","AnchorMode","AnchorModeNames","AnchorModeMap","anchorModeFrom","mode","PostConditionMode","PostConditionType","AuthType","AddressHashMode","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalId","AssetType","TenureChangeCause","AuthFieldType","TxRejectedReason","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","response","isClarityAbiOptional","isClarityAbiTuple","isClarityAbiList","getTypeUnion","id","encodeAbiClarityValue","union","encodeClarityValue","getTypeString","abiFunctionToString","func","access","args","arg","matchType","abiType","abiTupleEntry","validateContractCall","filtered","functions","fn","abiArgs","payloadArg","abiArg","argNum","parseToCV","typeString","TransactionError","captureStackTrace","SerializationError","DeserializationError","NoEstimateAvailableError","NotImplementedError","SigningError","VerificationError","BROADCAST_PATH","TRANSFER_FEE_ESTIMATE_PATH","TRANSACTION_FEE_ESTIMATE_PATH","ACCOUNT_PATH","CONTRACT_ABI_PATH","READONLY_FUNCTION_CALL_PATH","MAP_ENTRY_PATH","broadcastTransaction","txOpt","attachment","attachOpt","_network","_client","tx","json","method","headers","body","url","baseUrl","fetch","e","cause","text","txid","fetchNonce","possible_next_nonce","_getNonceApi","catch","status","statusText","fetchFeeEstimateTransfer","Accept","feeRateResult","txBytes","serializeBytes","fetchFeeEstimateTransaction","estimatedLength","transaction_payload","estimated_len","reason_data","estimations","fetchFeeEstimate","fetchAbi","fetchCallReadOnlyFunction","senderAddress","sender","arguments","encodeURIComponent","then","fetchContractMapEntry","mapName","mapKey","keyHex","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","COORDINATE_BYTES","privateKeyToBytes","privateKeyBuffer","getAddressFromPrivateKey","getAddressFromPublicKey","privateKeyToPublic","addrVer","createStacksPublicKey","publicKeyFromSignatureVrs","messageHash","messageSignature","parsedSignature","recoveryIdHex","r","recoveryId","parseRecoverableSignatureVrs","point","fromSignature","compressed","toHex","publicKeyFromSignatureRsv","privateKeyToHex","hmacSha256Sync","msgs","publicKeyToHex","isPrivateKeyCompressed","privateKeyIsCompressed","isPublicKeyCompressed","publicKeyIsCompressed","isCompressed","compressPublicKey","fromHex","uncompressPublicKey","makeRandomPrivKey","randomPrivateKey","compressPrivateKey","signWithKey","rawSignature","canonical","recovered","toCompactHex","signMessageHashRsv","privateKeyToAddress","publicKeyToAddressSingleSig","publicKeyToAddress","_publicKeyToAddress","C32","parsed","fromPrivateKey","fromPublicKey","PartialPcWithPrincipal","origin","willSendEq","PartialPcFtWithCode","willSendLte","willSendLt","willSendGte","willSendGt","willSendAsset","PartialPcNftWithCode","willNotSendAsset","code","ustx","ft","contractId","tokenName","asset","nft","assetId","assetName","nftAssetName","parseNft","getNftArgs","wire","PostConditionCodeWireType","Equal","Greater","Less","GreaterEqual","LessEqual","Sends","DoesNotSend","postConditionToWire","postcondition","PostCondition","conditionType","STX","Principal","Origin","conditionCode","conditionTypeToByte","Fungible","NonFungible","wireToPostCondition","principalWireToString","conditionByteToType","assetWireToString","postConditionToHex","postConditionModeFrom","Allow","Contract","TransactionSigner","signBegin","originDone","checkOversign","checkOverlap","nextVerify","originSigHash","nextSighash","signNextOrigin","appendPubkey","signNextSponsor","getTxInComplete","resume","STRUCTURED_DATA_PREFIX","hashStructuredData","structuredData","hashStructuredDataBytes","hash256BytesLength","encodeStructuredData","encodeStructuredDataBytes","domain","structuredDataHash","domainHash","decodeStructuredDataSignature","decodeStructuredDataSignatureBytes","encodedMessageBytes","signStructuredData","StacksTransactionWire","anchorMode","Any","verifyBegin","signAndAppend","cond","serialized","chainIdBytes","deserializeTransaction","deriveNetworkFromTx","estimateTransactionByteLength","multiSigSpendingCondition","existingSignatures","totalSignatureLength","serializeTransaction","serializeTransactionBytes","transactionToHex","Rho","Id","_","Pi","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","y","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","U32_MASK64","fromBig","le","lst","Ah","Al","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512_256","leftPadHex","hexString","leftPadHexToLength","rightPadHexToLength","padEnd","exceedsMaxLengthBytes","maxLengthBytes","cloneDeep","omit","prop","txidFromData","txidFromBytes","hashP2PKH","hashP2WPKH","keyHash","redeemScript","redeemScriptHash","hashP2SH","hashP2WSH","scriptArray","script","isClarityName","cvToHex","hexToCV","parseReadOnlyResponse","okay","validateStacksAddress","parseContractId","createEmptyAddress","Address","createMemoString","MemoString","createLPList","lengthPrefixBytes","LengthPrefixedList","createMessageSignature","createTokenTransferPayload","Payload","createContractCallPayload","createLPString","createAddress","codeBodyString","createSmartContractPayload","createPoisonPayload","PoisonMicroblock","createCoinbasePayload","coinbaseBytes","altRecipient","CoinbaseToAltRecipient","Coinbase","createNakamotoCoinbasePayload","vrfProof","NakamotoCoinbase","createTenureChangePayload","tenureHash","previousTenureHash","burnViewHash","previousTenureEnd","previousTenureBlocks","publicKeyHash","TenureChange","prefixLength","maxLength","LengthPrefixedString","createAsset","Asset","c32AddressString","addressData","createContractPrincipal","createStandardPrincipal","createTransactionAuthField","addressFromPublicKeys","p","addressFromVersionHash","addressToString","isTokenTransferPayload","isContractCallPayload","isSmartContractPayload","isPoisonPayload","isCoinbasePayload","parseAssetString","assetAddress","assetContractName","assetTokenName","parsePrincipalString","principalString","serializeStacksWire","serializeStacksWireBytes","serializeAddressBytes","serializePrincipalBytes","serializeLPStringBytes","serializeMemoStringBytes","serializeAssetBytes","serializePostConditionWireBytes","serializePublicKeyBytes","serializeLPListBytes","serializePayloadBytes","serializeTransactionAuthFieldBytes","serializeMessageSignatureBytes","deserializeStacksWire","listType","deserializeAddress","deserializePrincipal","deserializeLPString","deserializeMemoString","deserializeAsset","deserializePostConditionWire","deserializePublicKey","deserializePayload","deserializeLPList","deserializeMessageSignature","serializeAddress","serializePrincipal","serializeLPString","lps","contentBytes","serializeMemoString","memoString","paddedContent","serializeAsset","info","serializeLPList","lpList","deserializeTransactionAuthField","serializePostConditionWire","postCondition","postConditionType","serializePayload","numArgs","contractCallName","numberOfArgs","clarityValue","smartContractName","authFieldType","PublicKeyCompressed","PublicKeyUncompressed","SignatureCompressed","SignatureUncompressed","serializeMessageSignature","serializeTransactionAuthField","serializePublicKey","fieldId","keyLength","StacksWireType","whenWireType","wireTypeMap","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","transform","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","hasOwnProperty","objectToString","reIsNative","RegExp","Symbol","getPrototype","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Promise","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","stack","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","arrayBuffer","newValue","getMapData","getValue","isFunction","baseIsNative","pop","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","resolve","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","String","skipIndexes","arrayLikeKeys","baseKeys","writeUInt16BE","destination","writeUInt8","writeUInt32BE","HIRO_MAINNET_URL","HIRO_TESTNET_URL","DEVNET_URL","PRIVATE_KEY_BYTES_COMPRESSED","intToBytes","bigIntToBytes","intToBigInt","isInteger","isInstance","with0x","without0x","hexToBigInt","intToHex","integer","hexToInt","toTwos","width","bytesToTwosBigInt","nthBit","u","bytesToUtf8","asciiToBytes","byteArray","bytesToAscii","fromCharCode","apply","isNotOctet","octet","octetsToBytes","numbers","concatArray","elements","clazz","validateHash256","ChainId","PeerNetworkId","TransactionVersion","AddressVersion","whenTransactionVersion","defaultFetchOpts","referrerPolicy","fetchWrapper","init","fetchOpts","fetchLib","middlewares","argsForCreateFetchFn","fetchParams","middleware","pre","post","STACKS_MAINNET","peerNetworkId","magicBytes","bootAddress","multiSig","STACKS_TESTNET","STACKS_DEVNET","STACKS_MOCKNET","networkFrom","networkFromName","clientFromNetwork","_0n","_1n","_2n","_3n","_8n","CURVE","freeze","P","Gx","Gy","beta","divNearest","endo","splitScalar","a1","b1","a2","b2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","fromAffine","Point","equals","ZERO","toAffineBatch","points","toInv","nums","scratch","inverted","invert","acc","reduceRight","invertBatch","toAffine","normalizeZ","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1p","k2p","precomputeWindow","W","windows","base","window","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","item","neg","_setWindowSize","delete","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","assertValidity","fromUncompressedHex","ensureBytes","header","normalizePrivateKey","msgHash","recovery","normalizeSignature","truncateHash","radj","rinv","u1","u2","R","numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","Signature","fromCompact","hexToNumber","fromDER","sBytes","rBytesLeft","parseDERSignature","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","POW_2_256","numTo32b","power","modulo","q","m","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","utils","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","lowS","kinv","sig","getPublicKey","bits2int","bits2octets","z1","z2","int2octets","signSync","extraEntropy","seedArgs","initSigArgs","drbg","recSig","der","hashed","finalizeSig","vopts","strict","normalizePublicKey","sinv","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","precompute","cached","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","configurable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","getter","__esModule","ns","def","current","getOwnPropertyNames","definition","o","globalThis","toStringTag","nmd","paths","children"],"sourceRoot":""}